/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 54.0, "minX": 0.0, "maxY": 38394.0, "series": [{"data": [[0.0, 54.0], [0.1, 55.0], [0.2, 55.0], [0.3, 56.0], [0.4, 56.0], [0.5, 56.0], [0.6, 56.0], [0.7, 57.0], [0.8, 57.0], [0.9, 58.0], [1.0, 58.0], [1.1, 58.0], [1.2, 59.0], [1.3, 59.0], [1.4, 59.0], [1.5, 59.0], [1.6, 59.0], [1.7, 59.0], [1.8, 59.0], [1.9, 59.0], [2.0, 59.0], [2.1, 59.0], [2.2, 59.0], [2.3, 60.0], [2.4, 60.0], [2.5, 60.0], [2.6, 60.0], [2.7, 60.0], [2.8, 61.0], [2.9, 61.0], [3.0, 61.0], [3.1, 61.0], [3.2, 61.0], [3.3, 62.0], [3.4, 62.0], [3.5, 62.0], [3.6, 62.0], [3.7, 62.0], [3.8, 62.0], [3.9, 62.0], [4.0, 63.0], [4.1, 63.0], [4.2, 63.0], [4.3, 63.0], [4.4, 63.0], [4.5, 63.0], [4.6, 63.0], [4.7, 63.0], [4.8, 63.0], [4.9, 63.0], [5.0, 64.0], [5.1, 64.0], [5.2, 64.0], [5.3, 64.0], [5.4, 64.0], [5.5, 64.0], [5.6, 64.0], [5.7, 65.0], [5.8, 65.0], [5.9, 65.0], [6.0, 65.0], [6.1, 65.0], [6.2, 65.0], [6.3, 66.0], [6.4, 66.0], [6.5, 66.0], [6.6, 66.0], [6.7, 66.0], [6.8, 66.0], [6.9, 66.0], [7.0, 66.0], [7.1, 67.0], [7.2, 67.0], [7.3, 67.0], [7.4, 67.0], [7.5, 67.0], [7.6, 67.0], [7.7, 68.0], [7.8, 68.0], [7.9, 68.0], [8.0, 68.0], [8.1, 68.0], [8.2, 68.0], [8.3, 68.0], [8.4, 69.0], [8.5, 69.0], [8.6, 69.0], [8.7, 69.0], [8.8, 69.0], [8.9, 69.0], [9.0, 69.0], [9.1, 70.0], [9.2, 70.0], [9.3, 70.0], [9.4, 70.0], [9.5, 70.0], [9.6, 70.0], [9.7, 71.0], [9.8, 71.0], [9.9, 71.0], [10.0, 71.0], [10.1, 71.0], [10.2, 71.0], [10.3, 72.0], [10.4, 72.0], [10.5, 72.0], [10.6, 72.0], [10.7, 72.0], [10.8, 73.0], [10.9, 73.0], [11.0, 73.0], [11.1, 73.0], [11.2, 73.0], [11.3, 74.0], [11.4, 74.0], [11.5, 74.0], [11.6, 74.0], [11.7, 74.0], [11.8, 74.0], [11.9, 74.0], [12.0, 75.0], [12.1, 75.0], [12.2, 75.0], [12.3, 75.0], [12.4, 76.0], [12.5, 76.0], [12.6, 76.0], [12.7, 76.0], [12.8, 76.0], [12.9, 76.0], [13.0, 76.0], [13.1, 77.0], [13.2, 77.0], [13.3, 77.0], [13.4, 77.0], [13.5, 77.0], [13.6, 77.0], [13.7, 77.0], [13.8, 77.0], [13.9, 77.0], [14.0, 77.0], [14.1, 77.0], [14.2, 78.0], [14.3, 78.0], [14.4, 78.0], [14.5, 78.0], [14.6, 78.0], [14.7, 78.0], [14.8, 78.0], [14.9, 79.0], [15.0, 79.0], [15.1, 79.0], [15.2, 79.0], [15.3, 79.0], [15.4, 80.0], [15.5, 80.0], [15.6, 80.0], [15.7, 80.0], [15.8, 80.0], [15.9, 80.0], [16.0, 81.0], [16.1, 81.0], [16.2, 81.0], [16.3, 81.0], [16.4, 82.0], [16.5, 82.0], [16.6, 82.0], [16.7, 82.0], [16.8, 82.0], [16.9, 82.0], [17.0, 82.0], [17.1, 82.0], [17.2, 82.0], [17.3, 82.0], [17.4, 83.0], [17.5, 83.0], [17.6, 83.0], [17.7, 83.0], [17.8, 84.0], [17.9, 84.0], [18.0, 84.0], [18.1, 84.0], [18.2, 85.0], [18.3, 85.0], [18.4, 85.0], [18.5, 86.0], [18.6, 86.0], [18.7, 86.0], [18.8, 86.0], [18.9, 86.0], [19.0, 87.0], [19.1, 87.0], [19.2, 87.0], [19.3, 88.0], [19.4, 88.0], [19.5, 88.0], [19.6, 88.0], [19.7, 88.0], [19.8, 89.0], [19.9, 89.0], [20.0, 90.0], [20.1, 90.0], [20.2, 90.0], [20.3, 91.0], [20.4, 91.0], [20.5, 92.0], [20.6, 93.0], [20.7, 94.0], [20.8, 95.0], [20.9, 95.0], [21.0, 96.0], [21.1, 96.0], [21.2, 96.0], [21.3, 97.0], [21.4, 97.0], [21.5, 98.0], [21.6, 99.0], [21.7, 99.0], [21.8, 99.0], [21.9, 100.0], [22.0, 100.0], [22.1, 101.0], [22.2, 101.0], [22.3, 102.0], [22.4, 103.0], [22.5, 103.0], [22.6, 104.0], [22.7, 104.0], [22.8, 104.0], [22.9, 104.0], [23.0, 105.0], [23.1, 106.0], [23.2, 106.0], [23.3, 108.0], [23.4, 108.0], [23.5, 108.0], [23.6, 109.0], [23.7, 109.0], [23.8, 110.0], [23.9, 111.0], [24.0, 111.0], [24.1, 112.0], [24.2, 114.0], [24.3, 115.0], [24.4, 118.0], [24.5, 118.0], [24.6, 120.0], [24.7, 121.0], [24.8, 121.0], [24.9, 121.0], [25.0, 122.0], [25.1, 123.0], [25.2, 123.0], [25.3, 124.0], [25.4, 124.0], [25.5, 124.0], [25.6, 125.0], [25.7, 126.0], [25.8, 126.0], [25.9, 128.0], [26.0, 129.0], [26.1, 129.0], [26.2, 130.0], [26.3, 131.0], [26.4, 132.0], [26.5, 133.0], [26.6, 134.0], [26.7, 135.0], [26.8, 135.0], [26.9, 135.0], [27.0, 136.0], [27.1, 136.0], [27.2, 139.0], [27.3, 139.0], [27.4, 139.0], [27.5, 140.0], [27.6, 140.0], [27.7, 143.0], [27.8, 145.0], [27.9, 145.0], [28.0, 146.0], [28.1, 146.0], [28.2, 146.0], [28.3, 149.0], [28.4, 149.0], [28.5, 153.0], [28.6, 156.0], [28.7, 156.0], [28.8, 158.0], [28.9, 160.0], [29.0, 161.0], [29.1, 163.0], [29.2, 166.0], [29.3, 168.0], [29.4, 171.0], [29.5, 171.0], [29.6, 174.0], [29.7, 175.0], [29.8, 178.0], [29.9, 181.0], [30.0, 184.0], [30.1, 186.0], [30.2, 187.0], [30.3, 192.0], [30.4, 194.0], [30.5, 196.0], [30.6, 210.0], [30.7, 211.0], [30.8, 215.0], [30.9, 218.0], [31.0, 219.0], [31.1, 222.0], [31.2, 225.0], [31.3, 234.0], [31.4, 240.0], [31.5, 243.0], [31.6, 257.0], [31.7, 274.0], [31.8, 286.0], [31.9, 343.0], [32.0, 351.0], [32.1, 533.0], [32.2, 732.0], [32.3, 822.0], [32.4, 919.0], [32.5, 956.0], [32.6, 995.0], [32.7, 1243.0], [32.8, 1256.0], [32.9, 1275.0], [33.0, 1282.0], [33.1, 1335.0], [33.2, 1406.0], [33.3, 1438.0], [33.4, 1496.0], [33.5, 1519.0], [33.6, 1532.0], [33.7, 1538.0], [33.8, 1559.0], [33.9, 1653.0], [34.0, 1670.0], [34.1, 1682.0], [34.2, 1758.0], [34.3, 1800.0], [34.4, 1846.0], [34.5, 1992.0], [34.6, 2043.0], [34.7, 2349.0], [34.8, 2368.0], [34.9, 2569.0], [35.0, 2730.0], [35.1, 2786.0], [35.2, 2892.0], [35.3, 3122.0], [35.4, 3128.0], [35.5, 3216.0], [35.6, 3250.0], [35.7, 3298.0], [35.8, 3371.0], [35.9, 3424.0], [36.0, 3839.0], [36.1, 3950.0], [36.2, 4038.0], [36.3, 4111.0], [36.4, 4123.0], [36.5, 4181.0], [36.6, 4274.0], [36.7, 4383.0], [36.8, 4498.0], [36.9, 4569.0], [37.0, 5225.0], [37.1, 5371.0], [37.2, 5442.0], [37.3, 5490.0], [37.4, 5599.0], [37.5, 5619.0], [37.6, 5655.0], [37.7, 5678.0], [37.8, 5761.0], [37.9, 5796.0], [38.0, 6083.0], [38.1, 6236.0], [38.2, 6356.0], [38.3, 7481.0], [38.4, 7671.0], [38.5, 7841.0], [38.6, 7957.0], [38.7, 7982.0], [38.8, 8253.0], [38.9, 8427.0], [39.0, 8533.0], [39.1, 8649.0], [39.2, 8719.0], [39.3, 11941.0], [39.4, 12781.0], [39.5, 12899.0], [39.6, 13026.0], [39.7, 13109.0], [39.8, 13415.0], [39.9, 13971.0], [40.0, 13977.0], [40.1, 14317.0], [40.2, 14636.0], [40.3, 14651.0], [40.4, 14813.0], [40.5, 14817.0], [40.6, 14867.0], [40.7, 14921.0], [40.8, 14937.0], [40.9, 15032.0], [41.0, 15034.0], [41.1, 15068.0], [41.2, 15139.0], [41.3, 15169.0], [41.4, 15228.0], [41.5, 15229.0], [41.6, 15243.0], [41.7, 15278.0], [41.8, 15300.0], [41.9, 15325.0], [42.0, 15356.0], [42.1, 15357.0], [42.2, 15387.0], [42.3, 15401.0], [42.4, 15455.0], [42.5, 15522.0], [42.6, 15563.0], [42.7, 15628.0], [42.8, 15678.0], [42.9, 15704.0], [43.0, 15820.0], [43.1, 15869.0], [43.2, 15884.0], [43.3, 15911.0], [43.4, 15996.0], [43.5, 16043.0], [43.6, 16089.0], [43.7, 16113.0], [43.8, 16137.0], [43.9, 16141.0], [44.0, 16245.0], [44.1, 16247.0], [44.2, 16319.0], [44.3, 16467.0], [44.4, 16546.0], [44.5, 16642.0], [44.6, 16749.0], [44.7, 20157.0], [44.8, 20540.0], [44.9, 20718.0], [45.0, 21009.0], [45.1, 21420.0], [45.2, 21437.0], [45.3, 21489.0], [45.4, 21563.0], [45.5, 21637.0], [45.6, 21724.0], [45.7, 21759.0], [45.8, 21877.0], [45.9, 21902.0], [46.0, 21937.0], [46.1, 22023.0], [46.2, 22042.0], [46.3, 22085.0], [46.4, 22123.0], [46.5, 22150.0], [46.6, 22268.0], [46.7, 22270.0], [46.8, 22302.0], [46.9, 22389.0], [47.0, 22396.0], [47.1, 22410.0], [47.2, 22482.0], [47.3, 22501.0], [47.4, 22529.0], [47.5, 22560.0], [47.6, 22575.0], [47.7, 22606.0], [47.8, 22653.0], [47.9, 22733.0], [48.0, 22773.0], [48.1, 22780.0], [48.2, 22795.0], [48.3, 22819.0], [48.4, 22921.0], [48.5, 23065.0], [48.6, 23086.0], [48.7, 23095.0], [48.8, 23129.0], [48.9, 23140.0], [49.0, 23148.0], [49.1, 23182.0], [49.2, 23189.0], [49.3, 23198.0], [49.4, 23288.0], [49.5, 23321.0], [49.6, 23361.0], [49.7, 23364.0], [49.8, 23387.0], [49.9, 23457.0], [50.0, 23498.0], [50.1, 23523.0], [50.2, 23561.0], [50.3, 23568.0], [50.4, 23712.0], [50.5, 23832.0], [50.6, 23847.0], [50.7, 23874.0], [50.8, 23881.0], [50.9, 23886.0], [51.0, 23887.0], [51.1, 23887.0], [51.2, 23889.0], [51.3, 23900.0], [51.4, 23905.0], [51.5, 23906.0], [51.6, 23906.0], [51.7, 23910.0], [51.8, 23924.0], [51.9, 23924.0], [52.0, 23942.0], [52.1, 23953.0], [52.2, 23961.0], [52.3, 23971.0], [52.4, 23977.0], [52.5, 23980.0], [52.6, 23981.0], [52.7, 23984.0], [52.8, 24005.0], [52.9, 24011.0], [53.0, 24014.0], [53.1, 24030.0], [53.2, 24137.0], [53.3, 24273.0], [53.4, 24730.0], [53.5, 24916.0], [53.6, 25056.0], [53.7, 25110.0], [53.8, 25342.0], [53.9, 25350.0], [54.0, 25406.0], [54.1, 25828.0], [54.2, 25874.0], [54.3, 26168.0], [54.4, 26359.0], [54.5, 26369.0], [54.6, 26551.0], [54.7, 26568.0], [54.8, 26704.0], [54.9, 26783.0], [55.0, 26882.0], [55.1, 27110.0], [55.2, 27149.0], [55.3, 27170.0], [55.4, 27277.0], [55.5, 27280.0], [55.6, 27412.0], [55.7, 27419.0], [55.8, 27514.0], [55.9, 27537.0], [56.0, 27574.0], [56.1, 27781.0], [56.2, 27787.0], [56.3, 27812.0], [56.4, 27935.0], [56.5, 27942.0], [56.6, 27952.0], [56.7, 27986.0], [56.8, 28096.0], [56.9, 28111.0], [57.0, 28152.0], [57.1, 28167.0], [57.2, 28206.0], [57.3, 28265.0], [57.4, 28311.0], [57.5, 28313.0], [57.6, 28318.0], [57.7, 28341.0], [57.8, 28350.0], [57.9, 28386.0], [58.0, 28416.0], [58.1, 28428.0], [58.2, 28453.0], [58.3, 28458.0], [58.4, 28462.0], [58.5, 28477.0], [58.6, 28492.0], [58.7, 28523.0], [58.8, 28527.0], [58.9, 28553.0], [59.0, 28576.0], [59.1, 28578.0], [59.2, 28591.0], [59.3, 28620.0], [59.4, 28625.0], [59.5, 28639.0], [59.6, 28645.0], [59.7, 28663.0], [59.8, 28677.0], [59.9, 28697.0], [60.0, 28712.0], [60.1, 28767.0], [60.2, 28797.0], [60.3, 28867.0], [60.4, 28884.0], [60.5, 28924.0], [60.6, 28927.0], [60.7, 28946.0], [60.8, 28981.0], [60.9, 29001.0], [61.0, 29021.0], [61.1, 29043.0], [61.2, 29076.0], [61.3, 29106.0], [61.4, 29114.0], [61.5, 29133.0], [61.6, 29133.0], [61.7, 29173.0], [61.8, 29184.0], [61.9, 29207.0], [62.0, 29275.0], [62.1, 29300.0], [62.2, 29301.0], [62.3, 29389.0], [62.4, 29407.0], [62.5, 29434.0], [62.6, 29473.0], [62.7, 29476.0], [62.8, 29491.0], [62.9, 29512.0], [63.0, 29545.0], [63.1, 29655.0], [63.2, 29667.0], [63.3, 29695.0], [63.4, 29731.0], [63.5, 29761.0], [63.6, 29798.0], [63.7, 29880.0], [63.8, 29905.0], [63.9, 29967.0], [64.0, 30010.0], [64.1, 30015.0], [64.2, 30024.0], [64.3, 30044.0], [64.4, 30073.0], [64.5, 30102.0], [64.6, 30127.0], [64.7, 30141.0], [64.8, 30163.0], [64.9, 30184.0], [65.0, 30200.0], [65.1, 30217.0], [65.2, 30246.0], [65.3, 30248.0], [65.4, 30282.0], [65.5, 30289.0], [65.6, 30304.0], [65.7, 30329.0], [65.8, 30329.0], [65.9, 30348.0], [66.0, 30353.0], [66.1, 30362.0], [66.2, 30382.0], [66.3, 30385.0], [66.4, 30439.0], [66.5, 30450.0], [66.6, 30459.0], [66.7, 30525.0], [66.8, 30526.0], [66.9, 30574.0], [67.0, 30588.0], [67.1, 30611.0], [67.2, 30665.0], [67.3, 30676.0], [67.4, 30708.0], [67.5, 30765.0], [67.6, 30768.0], [67.7, 30811.0], [67.8, 30814.0], [67.9, 30902.0], [68.0, 30923.0], [68.1, 30925.0], [68.2, 30965.0], [68.3, 30966.0], [68.4, 30996.0], [68.5, 31025.0], [68.6, 31026.0], [68.7, 31029.0], [68.8, 31058.0], [68.9, 31065.0], [69.0, 31076.0], [69.1, 31178.0], [69.2, 31222.0], [69.3, 31226.0], [69.4, 31236.0], [69.5, 31268.0], [69.6, 31282.0], [69.7, 31297.0], [69.8, 31311.0], [69.9, 31323.0], [70.0, 31398.0], [70.1, 31416.0], [70.2, 31428.0], [70.3, 31439.0], [70.4, 31445.0], [70.5, 31486.0], [70.6, 31513.0], [70.7, 31517.0], [70.8, 31536.0], [70.9, 31554.0], [71.0, 31579.0], [71.1, 31601.0], [71.2, 31606.0], [71.3, 31630.0], [71.4, 31636.0], [71.5, 31645.0], [71.6, 31666.0], [71.7, 31672.0], [71.8, 31714.0], [71.9, 31748.0], [72.0, 31757.0], [72.1, 31764.0], [72.2, 31771.0], [72.3, 31776.0], [72.4, 31785.0], [72.5, 31792.0], [72.6, 31843.0], [72.7, 31860.0], [72.8, 31882.0], [72.9, 31899.0], [73.0, 31925.0], [73.1, 31957.0], [73.2, 31977.0], [73.3, 31997.0], [73.4, 32026.0], [73.5, 32030.0], [73.6, 32067.0], [73.7, 32073.0], [73.8, 32087.0], [73.9, 32116.0], [74.0, 32133.0], [74.1, 32151.0], [74.2, 32159.0], [74.3, 32169.0], [74.4, 32188.0], [74.5, 32206.0], [74.6, 32242.0], [74.7, 32273.0], [74.8, 32279.0], [74.9, 32293.0], [75.0, 32339.0], [75.1, 32341.0], [75.2, 32350.0], [75.3, 32354.0], [75.4, 32378.0], [75.5, 32392.0], [75.6, 32445.0], [75.7, 32505.0], [75.8, 32508.0], [75.9, 32512.0], [76.0, 32519.0], [76.1, 32521.0], [76.2, 32547.0], [76.3, 32575.0], [76.4, 32617.0], [76.5, 32622.0], [76.6, 32630.0], [76.7, 32648.0], [76.8, 32668.0], [76.9, 32681.0], [77.0, 32745.0], [77.1, 32759.0], [77.2, 32798.0], [77.3, 32851.0], [77.4, 32939.0], [77.5, 32960.0], [77.6, 32961.0], [77.7, 32983.0], [77.8, 33036.0], [77.9, 33052.0], [78.0, 33071.0], [78.1, 33106.0], [78.2, 33158.0], [78.3, 33186.0], [78.4, 33198.0], [78.5, 33201.0], [78.6, 33208.0], [78.7, 33237.0], [78.8, 33254.0], [78.9, 33264.0], [79.0, 33304.0], [79.1, 33310.0], [79.2, 33311.0], [79.3, 33321.0], [79.4, 33322.0], [79.5, 33370.0], [79.6, 33380.0], [79.7, 33391.0], [79.8, 33405.0], [79.9, 33421.0], [80.0, 33446.0], [80.1, 33485.0], [80.2, 33519.0], [80.3, 33520.0], [80.4, 33526.0], [80.5, 33531.0], [80.6, 33605.0], [80.7, 33609.0], [80.8, 33621.0], [80.9, 33661.0], [81.0, 33675.0], [81.1, 33682.0], [81.2, 33695.0], [81.3, 33715.0], [81.4, 33775.0], [81.5, 33781.0], [81.6, 33815.0], [81.7, 33838.0], [81.8, 33852.0], [81.9, 33889.0], [82.0, 33904.0], [82.1, 33940.0], [82.2, 33953.0], [82.3, 33966.0], [82.4, 33983.0], [82.5, 33988.0], [82.6, 34034.0], [82.7, 34054.0], [82.8, 34097.0], [82.9, 34166.0], [83.0, 34185.0], [83.1, 34232.0], [83.2, 34267.0], [83.3, 34291.0], [83.4, 34310.0], [83.5, 34319.0], [83.6, 34326.0], [83.7, 34338.0], [83.8, 34339.0], [83.9, 34388.0], [84.0, 34421.0], [84.1, 34422.0], [84.2, 34432.0], [84.3, 34433.0], [84.4, 34484.0], [84.5, 34518.0], [84.6, 34552.0], [84.7, 34575.0], [84.8, 34591.0], [84.9, 34615.0], [85.0, 34681.0], [85.1, 34687.0], [85.2, 34733.0], [85.3, 34761.0], [85.4, 34774.0], [85.5, 34786.0], [85.6, 34792.0], [85.7, 34859.0], [85.8, 34894.0], [85.9, 34911.0], [86.0, 34951.0], [86.1, 34960.0], [86.2, 34988.0], [86.3, 35004.0], [86.4, 35015.0], [86.5, 35031.0], [86.6, 35040.0], [86.7, 35052.0], [86.8, 35099.0], [86.9, 35107.0], [87.0, 35148.0], [87.1, 35171.0], [87.2, 35176.0], [87.3, 35218.0], [87.4, 35271.0], [87.5, 35295.0], [87.6, 35311.0], [87.7, 35335.0], [87.8, 35354.0], [87.9, 35361.0], [88.0, 35369.0], [88.1, 35379.0], [88.2, 35381.0], [88.3, 35395.0], [88.4, 35404.0], [88.5, 35404.0], [88.6, 35412.0], [88.7, 35440.0], [88.8, 35451.0], [88.9, 35462.0], [89.0, 35482.0], [89.1, 35488.0], [89.2, 35499.0], [89.3, 35516.0], [89.4, 35553.0], [89.5, 35565.0], [89.6, 35584.0], [89.7, 35589.0], [89.8, 35601.0], [89.9, 35617.0], [90.0, 35617.0], [90.1, 35641.0], [90.2, 35653.0], [90.3, 35658.0], [90.4, 35663.0], [90.5, 35668.0], [90.6, 35696.0], [90.7, 35697.0], [90.8, 35699.0], [90.9, 35716.0], [91.0, 35722.0], [91.1, 35732.0], [91.2, 35761.0], [91.3, 35767.0], [91.4, 35799.0], [91.5, 35815.0], [91.6, 35832.0], [91.7, 35861.0], [91.8, 35873.0], [91.9, 35899.0], [92.0, 35924.0], [92.1, 35935.0], [92.2, 35940.0], [92.3, 35941.0], [92.4, 35946.0], [92.5, 35964.0], [92.6, 35970.0], [92.7, 36031.0], [92.8, 36041.0], [92.9, 36053.0], [93.0, 36061.0], [93.1, 36062.0], [93.2, 36068.0], [93.3, 36081.0], [93.4, 36088.0], [93.5, 36097.0], [93.6, 36097.0], [93.7, 36105.0], [93.8, 36118.0], [93.9, 36142.0], [94.0, 36211.0], [94.1, 36219.0], [94.2, 36231.0], [94.3, 36243.0], [94.4, 36257.0], [94.5, 36270.0], [94.6, 36305.0], [94.7, 36333.0], [94.8, 36424.0], [94.9, 36443.0], [95.0, 36451.0], [95.1, 36489.0], [95.2, 36518.0], [95.3, 36567.0], [95.4, 36573.0], [95.5, 36611.0], [95.6, 36654.0], [95.7, 36655.0], [95.8, 36675.0], [95.9, 36677.0], [96.0, 36686.0], [96.1, 36693.0], [96.2, 36701.0], [96.3, 36716.0], [96.4, 36730.0], [96.5, 36754.0], [96.6, 36766.0], [96.7, 36776.0], [96.8, 36794.0], [96.9, 36806.0], [97.0, 36853.0], [97.1, 36863.0], [97.2, 36866.0], [97.3, 36890.0], [97.4, 36900.0], [97.5, 36910.0], [97.6, 36923.0], [97.7, 36963.0], [97.8, 36979.0], [97.9, 37005.0], [98.0, 37007.0], [98.1, 37037.0], [98.2, 37113.0], [98.3, 37134.0], [98.4, 37148.0], [98.5, 37154.0], [98.6, 37175.0], [98.7, 37219.0], [98.8, 37221.0], [98.9, 37254.0], [99.0, 37257.0], [99.1, 37298.0], [99.2, 37299.0], [99.3, 37300.0], [99.4, 37487.0], [99.5, 37493.0], [99.6, 37545.0], [99.7, 37710.0], [99.8, 37814.0], [99.9, 38326.0]], "isOverall": false, "label": "https://localhost:7208", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 352.0, "series": [{"data": [[0.0, 352.0], [100.0, 140.0], [34500.0, 6.0], [34100.0, 3.0], [33300.0, 13.0], [32900.0, 6.0], [33700.0, 5.0], [36500.0, 5.0], [36100.0, 6.0], [34900.0, 7.0], [35700.0, 10.0], [35300.0, 13.0], [36900.0, 8.0], [37300.0, 1.0], [37700.0, 1.0], [200.0, 21.0], [300.0, 3.0], [400.0, 1.0], [500.0, 1.0], [600.0, 1.0], [700.0, 1.0], [800.0, 2.0], [900.0, 4.0], [1000.0, 1.0], [1200.0, 5.0], [1300.0, 3.0], [1400.0, 4.0], [1500.0, 7.0], [1600.0, 4.0], [1700.0, 2.0], [1800.0, 3.0], [1900.0, 2.0], [2000.0, 1.0], [2200.0, 1.0], [2300.0, 2.0], [2500.0, 2.0], [2600.0, 1.0], [2700.0, 2.0], [2800.0, 2.0], [3000.0, 1.0], [3100.0, 3.0], [3200.0, 4.0], [3300.0, 2.0], [3400.0, 2.0], [3800.0, 1.0], [3900.0, 2.0], [4000.0, 1.0], [4100.0, 5.0], [4300.0, 2.0], [4200.0, 1.0], [4500.0, 1.0], [4400.0, 2.0], [4700.0, 1.0], [5300.0, 2.0], [5200.0, 1.0], [5600.0, 5.0], [5400.0, 3.0], [5500.0, 1.0], [5700.0, 3.0], [6000.0, 2.0], [6100.0, 1.0], [6200.0, 1.0], [6300.0, 1.0], [6600.0, 1.0], [7400.0, 1.0], [7600.0, 2.0], [7900.0, 2.0], [7800.0, 2.0], [8100.0, 1.0], [8300.0, 1.0], [8200.0, 1.0], [8500.0, 2.0], [8600.0, 1.0], [8700.0, 1.0], [8400.0, 1.0], [9600.0, 1.0], [12000.0, 1.0], [11900.0, 1.0], [12700.0, 1.0], [13000.0, 1.0], [12900.0, 1.0], [12800.0, 1.0], [13100.0, 1.0], [13300.0, 1.0], [13400.0, 1.0], [13600.0, 1.0], [13900.0, 2.0], [14000.0, 1.0], [14300.0, 1.0], [14600.0, 2.0], [14500.0, 1.0], [14700.0, 1.0], [14800.0, 5.0], [15300.0, 8.0], [15200.0, 7.0], [15100.0, 2.0], [15000.0, 5.0], [14900.0, 3.0], [15700.0, 2.0], [15400.0, 3.0], [15800.0, 4.0], [15500.0, 3.0], [15600.0, 4.0], [16200.0, 3.0], [16100.0, 5.0], [16000.0, 3.0], [16300.0, 3.0], [15900.0, 3.0], [16400.0, 1.0], [16600.0, 1.0], [20000.0, 1.0], [21000.0, 1.0], [21400.0, 4.0], [21800.0, 2.0], [22400.0, 4.0], [22200.0, 4.0], [22000.0, 5.0], [21600.0, 2.0], [22800.0, 3.0], [23200.0, 2.0], [23000.0, 5.0], [22600.0, 3.0], [23400.0, 4.0], [23800.0, 12.0], [24000.0, 7.0], [23600.0, 1.0], [24200.0, 1.0], [25400.0, 1.0], [25000.0, 1.0], [25600.0, 1.0], [25800.0, 2.0], [26400.0, 1.0], [26600.0, 1.0], [27600.0, 1.0], [27200.0, 3.0], [27000.0, 1.0], [27400.0, 4.0], [26800.0, 1.0], [27800.0, 1.0], [28400.0, 11.0], [28600.0, 12.0], [28000.0, 1.0], [28200.0, 3.0], [28800.0, 3.0], [29400.0, 8.0], [29000.0, 7.0], [29200.0, 4.0], [29600.0, 4.0], [30400.0, 5.0], [30600.0, 4.0], [29800.0, 2.0], [30200.0, 10.0], [30000.0, 8.0], [31400.0, 9.0], [31600.0, 11.0], [31000.0, 10.0], [31200.0, 9.0], [30800.0, 3.0], [32600.0, 11.0], [32200.0, 9.0], [32000.0, 9.0], [31800.0, 7.0], [32400.0, 2.0], [34400.0, 8.0], [34000.0, 5.0], [32800.0, 2.0], [33200.0, 9.0], [33600.0, 10.0], [34800.0, 4.0], [36400.0, 6.0], [36000.0, 16.0], [35600.0, 17.0], [36800.0, 8.0], [35200.0, 6.0], [37200.0, 10.0], [34700.0, 8.0], [34300.0, 10.0], [33100.0, 6.0], [33900.0, 9.0], [33500.0, 7.0], [36300.0, 4.0], [36700.0, 12.0], [35100.0, 6.0], [35500.0, 9.0], [35900.0, 11.0], [37100.0, 8.0], [38300.0, 2.0], [37900.0, 1.0], [37500.0, 3.0], [16500.0, 2.0], [16700.0, 1.0], [20300.0, 1.0], [20100.0, 1.0], [20700.0, 1.0], [20900.0, 1.0], [20500.0, 1.0], [21500.0, 2.0], [21300.0, 1.0], [21700.0, 2.0], [22300.0, 4.0], [21900.0, 3.0], [22100.0, 3.0], [22500.0, 6.0], [22700.0, 6.0], [23500.0, 4.0], [23100.0, 9.0], [23300.0, 6.0], [22900.0, 1.0], [23700.0, 2.0], [23900.0, 24.0], [24100.0, 2.0], [24900.0, 2.0], [25300.0, 3.0], [24700.0, 2.0], [25100.0, 2.0], [25900.0, 1.0], [26300.0, 3.0], [26100.0, 1.0], [26500.0, 2.0], [27100.0, 4.0], [27500.0, 4.0], [26700.0, 3.0], [27900.0, 7.0], [28100.0, 6.0], [27700.0, 3.0], [28500.0, 10.0], [28300.0, 9.0], [28700.0, 4.0], [29100.0, 9.0], [29500.0, 4.0], [28900.0, 7.0], [29300.0, 4.0], [30700.0, 6.0], [30100.0, 8.0], [30300.0, 12.0], [29700.0, 5.0], [30500.0, 7.0], [29900.0, 3.0], [31300.0, 5.0], [31500.0, 8.0], [31700.0, 12.0], [31100.0, 2.0], [30900.0, 9.0], [32300.0, 9.0], [32100.0, 9.0], [32700.0, 4.0], [32500.0, 10.0], [31900.0, 6.0], [34600.0, 5.0], [33400.0, 6.0], [33000.0, 5.0], [33800.0, 7.0], [34200.0, 5.0], [36200.0, 9.0], [36600.0, 11.0], [35400.0, 13.0], [35800.0, 8.0], [35000.0, 9.0], [37000.0, 4.0], [37400.0, 3.0], [37800.0, 1.0]], "isOverall": false, "label": "https://localhost:7208", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 38300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 23.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1.500ms"], [2, "Requests having \nresponse time > 1.500ms"], [3, "Requests in error"]], "maxY": 895.0, "series": [{"data": [[0.0, 517.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 23.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1.500ms", "isController": false}, {"data": [[2.0, 895.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1.500ms", "isController": false}, {"data": [[3.0, 177.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.6544545875E12, "maxY": 1.0, "series": [{"data": [[1.654454628E12, 1.0], [1.6544546055E12, 1.0], [1.6544546505E12, 1.0], [1.6544546475E12, 1.0], [1.6544546115E12, 1.0], [1.654454592E12, 1.0], [1.654454634E12, 1.0], [1.6544546085E12, 1.0], [1.654454589E12, 1.0], [1.654454631E12, 1.0], [1.6544546385E12, 1.0], [1.6544545965E12, 1.0], [1.6544546355E12, 1.0], [1.654454616E12, 1.0], [1.6544545935E12, 1.0], [1.654454622E12, 1.0], [1.6544546025E12, 1.0], [1.6544545995E12, 1.0], [1.6544546415E12, 1.0], [1.654454649E12, 1.0], [1.654454607E12, 1.0], [1.654454604E12, 1.0], [1.654454646E12, 1.0], [1.6544545905E12, 1.0], [1.6544546325E12, 1.0], [1.654454613E12, 1.0], [1.6544545875E12, 1.0], [1.6544546295E12, 1.0], [1.65445461E12, 1.0], [1.654454595E12, 1.0], [1.65445464E12, 1.0], [1.6544546145E12, 1.0], [1.654454637E12, 1.0], [1.654454601E12, 1.0], [1.654454643E12, 1.0], [1.6544546235E12, 1.0], [1.654454598E12, 1.0], [1.6544546205E12, 1.0]], "isOverall": false, "label": "parallel bzm - Parallel", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.6544546505E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 69.28682170542636, "minX": 1.0, "maxY": 38326.0, "series": [{"data": [[2.0, 69.28682170542636], [3.0, 75.68376068376074], [4.0, 1314.6410256410256], [5.0, 755.4285714285713], [6.0, 946.7317073170732], [7.0, 1096.235294117647], [8.0, 2735.6666666666665], [9.0, 3248.9], [10.0, 6428.0], [11.0, 2732.0], [12.0, 7976.75], [13.0, 10211.0], [14.0, 31030.0], [15.0, 15943.5], [16.0, 250.5], [19.0, 25134.8], [20.0, 31641.0], [21.0, 351.0], [22.0, 21280.666666666668], [23.0, 533.0], [24.0, 31379.5], [26.0, 32980.0], [28.0, 30011.0], [29.0, 31853.0], [30.0, 33812.0], [32.0, 31952.5], [35.0, 31388.333333333332], [37.0, 31199.0], [38.0, 30296.0], [40.0, 32575.5], [42.0, 732.0], [43.0, 30814.5], [45.0, 33838.666666666664], [47.0, 30976.0], [46.0, 34261.0], [49.0, 15577.0], [48.0, 16303.5], [51.0, 5394.0], [50.0, 30328.0], [53.0, 31946.0], [55.0, 31018.0], [57.0, 31554.0], [56.0, 30329.0], [59.0, 30360.0], [58.0, 32981.0], [61.0, 35311.0], [60.0, 32244.0], [63.0, 31713.5], [67.0, 1278.25], [66.0, 16413.0], [65.0, 31771.0], [64.0, 32512.0], [71.0, 32745.0], [69.0, 32341.0], [68.0, 31206.5], [72.0, 30574.0], [78.0, 10256.25], [79.0, 32273.0], [77.0, 30385.0], [76.0, 31125.75], [80.0, 9729.75], [83.0, 30289.0], [82.0, 34792.0], [81.0, 34267.0], [87.0, 7339.0], [84.0, 1444.6], [86.0, 32511.0], [85.0, 31150.5], [90.0, 8933.0], [89.0, 30902.0], [88.0, 33706.0], [93.0, 9122.25], [95.0, 31897.0], [94.0, 28949.0], [92.0, 30290.5], [96.0, 1804.6666666666667], [99.0, 31486.0], [98.0, 30382.0], [97.0, 33533.0], [103.0, 30708.0], [102.0, 32667.0], [101.0, 30105.0], [100.0, 32668.0], [107.0, 31026.0], [106.0, 30814.0], [105.0, 29761.0], [104.0, 32133.0], [111.0, 31293.0], [110.0, 31617.0], [109.0, 30884.0], [108.0, 31065.0], [115.0, 21426.333333333332], [113.0, 30217.0], [112.0, 31222.0], [117.0, 11460.333333333334], [118.0, 34988.0], [116.0, 32648.0], [123.0, 29695.0], [122.0, 31764.0], [121.0, 29655.0], [120.0, 34616.0], [127.0, 30603.5], [125.0, 35168.0], [124.0, 31606.0], [135.0, 31226.0], [134.0, 30455.0], [133.0, 30996.0], [132.0, 31282.0], [131.0, 31178.0], [130.0, 31579.0], [129.0, 30521.0], [128.0, 28797.0], [143.0, 30963.0], [142.0, 32298.0], [141.0, 29880.0], [140.0, 30015.0], [139.0, 31860.0], [138.0, 30251.0], [137.0, 30347.0], [136.0, 33722.0], [149.0, 14614.2], [148.0, 2358.5], [151.0, 31092.0], [147.0, 28697.0], [146.0, 30701.0], [145.0, 31873.0], [144.0, 32519.0], [153.0, 2649.5], [159.0, 28623.0], [158.0, 30072.0], [157.0, 28696.0], [156.0, 31412.0], [155.0, 29530.0], [154.0, 30167.5], [152.0, 32030.0], [166.0, 29476.0], [165.0, 30362.0], [164.0, 30010.0], [163.0, 30595.5], [161.0, 28620.0], [160.0, 32521.0], [175.0, 30760.5], [173.0, 28578.0], [172.0, 28575.0], [171.0, 28625.0], [170.0, 30353.0], [169.0, 31636.0], [168.0, 29802.0], [183.0, 29967.0], [182.0, 30693.333333333332], [179.0, 29949.0], [178.0, 29713.0], [177.0, 32067.0], [176.0, 28529.0], [190.0, 5953.0], [189.0, 20615.666666666668], [191.0, 31073.0], [187.0, 30073.0], [186.0, 34575.0], [185.0, 28507.0], [184.0, 29389.0], [194.0, 11623.333333333334], [193.0, 3256.0], [199.0, 28462.0], [198.0, 31445.0], [197.0, 29546.0], [196.0, 30588.0], [195.0, 31945.5], [192.0, 28476.0], [206.0, 31311.0], [205.0, 31412.0], [204.0, 29301.0], [202.0, 30044.0], [201.0, 28416.0], [200.0, 30024.0], [215.0, 28341.0], [214.0, 31454.0], [212.0, 34291.0], [211.0, 28350.0], [210.0, 33781.0], [209.0, 28386.0], [208.0, 31038.0], [223.0, 31953.5], [221.0, 32293.0], [220.0, 31439.0], [219.0, 29667.0], [218.0, 29274.0], [216.0, 28424.0], [231.0, 31619.0], [229.0, 29865.5], [227.0, 28291.0], [226.0, 32495.0], [224.0, 31672.0], [239.0, 33405.0], [238.0, 29106.0], [237.0, 33715.0], [236.0, 34185.0], [235.0, 30459.0], [234.0, 33942.0], [233.0, 33198.0], [232.0, 29166.0], [247.0, 4207.75], [243.0, 10175.8], [244.0, 29797.0], [242.0, 30248.0], [241.0, 29798.0], [240.0, 28265.0], [248.0, 18204.125], [255.0, 31925.0], [254.0, 34054.0], [253.0, 30633.0], [251.0, 29091.0], [250.0, 36097.0], [249.0, 31813.0], [270.0, 32366.0], [271.0, 33252.0], [269.0, 33531.0], [268.0, 33520.0], [267.0, 32242.0], [266.0, 33258.0], [264.0, 29386.0], [263.0, 31259.0], [257.0, 34501.0], [256.0, 31534.0], [259.0, 33681.0], [258.0, 29545.0], [262.0, 32382.0], [261.0, 36067.0], [260.0, 32983.0], [284.0, 33605.0], [276.0, 13664.0], [277.0, 32798.0], [275.0, 18068.0], [274.0, 17365.5], [287.0, 32137.0], [283.0, 32465.5], [281.0, 33158.0], [280.0, 33397.0], [279.0, 34422.0], [273.0, 31029.0], [272.0, 32445.0], [278.0, 27986.0], [302.0, 31784.0], [300.0, 33203.0], [288.0, 32696.0], [299.0, 31957.0], [298.0, 31536.0], [297.0, 30631.0], [296.0, 33967.0], [295.0, 32350.0], [294.0, 33421.0], [293.0, 30768.0], [292.0, 32525.75], [316.0, 32146.0], [318.0, 31428.0], [319.0, 31588.0], [317.0, 33391.0], [313.0, 32050.0], [312.0, 31899.0], [311.0, 33440.5], [304.0, 34003.333333333336], [307.0, 33064.0], [306.0, 34034.0], [309.0, 35285.0], [308.0, 31757.0], [334.0, 33110.5], [332.0, 30102.0], [331.0, 35384.0], [330.0, 35171.0], [329.0, 33953.0], [328.0, 32017.0], [327.0, 32142.0], [324.0, 34310.0], [323.0, 31780.0], [321.0, 34552.0], [320.0, 31666.0], [349.0, 5475.5], [348.0, 19332.5], [337.0, 34614.0], [336.0, 32767.5], [346.0, 14502.333333333334], [344.0, 20426.5], [342.0, 19799.5], [341.0, 33601.0], [343.0, 34315.0], [351.0, 33889.0], [350.0, 33873.0], [347.0, 34859.0], [345.0, 30141.0], [367.0, 32378.0], [365.0, 33525.5], [363.0, 34894.0], [362.0, 33983.0], [361.0, 32508.0], [360.0, 32536.5], [358.0, 32778.0], [356.0, 35379.0], [355.0, 33680.5], [353.0, 35699.0], [352.0, 35482.0], [381.0, 35218.0], [383.0, 25050.0], [380.0, 37532.0], [371.0, 33311.0], [370.0, 34117.0], [368.0, 34634.0], [379.0, 36041.0], [378.0, 34591.0], [377.0, 34388.0], [376.0, 35031.0], [375.0, 34799.5], [373.0, 36917.0], [372.0, 34812.0], [384.0, 9004.8], [397.0, 34974.0], [399.0, 35397.0], [396.0, 33237.0], [387.0, 33173.0], [386.0, 33364.0], [385.0, 33052.0], [395.0, 34154.333333333336], [392.0, 35668.0], [391.0, 33254.0], [390.0, 32961.0], [389.0, 33264.0], [388.0, 35553.0], [414.0, 35447.0], [415.0, 33322.0], [413.0, 34931.0], [412.0, 36737.0], [410.0, 34406.0], [409.0, 33560.0], [408.0, 36097.0], [407.0, 33380.0], [401.0, 34781.0], [400.0, 35398.0], [403.0, 34687.0], [402.0, 33071.0], [406.0, 33305.0], [405.0, 33940.0], [404.0, 35004.0], [429.0, 35767.0], [430.0, 33852.0], [428.0, 33957.0], [419.0, 34643.666666666664], [416.0, 37487.0], [426.0, 37710.0], [425.0, 37119.0], [424.0, 37037.0], [423.0, 33036.0], [422.0, 35074.0], [420.0, 35052.0], [435.0, 34339.0], [446.0, 36227.5], [447.0, 33966.0], [444.0, 35949.5], [434.0, 34548.0], [432.0, 33889.0], [442.0, 37007.0], [441.0, 34631.5], [439.0, 32821.0], [438.0, 33277.0], [437.0, 35946.0], [436.0, 33931.0], [462.0, 34001.5], [463.0, 37254.0], [461.0, 33987.0], [451.0, 36285.0], [449.0, 33186.0], [448.0, 36365.0], [458.0, 37555.0], [457.0, 33019.0], [456.0, 34774.0], [455.0, 37221.0], [454.0, 36766.0], [453.0, 32764.0], [452.0, 36061.0], [478.0, 35942.0], [479.0, 35395.0], [477.0, 36701.0], [476.0, 36853.0], [475.0, 35099.0], [474.0, 37346.5], [472.0, 36053.0], [471.0, 35299.0], [466.0, 35603.0], [464.0, 35516.0], [470.0, 35363.0], [469.0, 35015.0], [468.0, 35758.0], [494.0, 22073.0], [495.0, 7671.0], [493.0, 35468.0], [483.0, 35209.0], [482.0, 34097.0], [481.0, 35507.0], [480.0, 36026.0], [491.0, 36446.0], [490.0, 37426.0], [489.0, 35715.0], [487.0, 35782.0], [486.0, 35565.0], [485.0, 35970.0], [484.0, 36031.0], [509.0, 36588.0], [496.0, 19067.4], [510.0, 35067.0], [508.0, 35499.0], [498.0, 37154.0], [497.0, 38326.0], [507.0, 36868.0], [506.0, 36174.0], [505.0, 36441.666666666664], [502.0, 36768.0], [500.0, 36967.5], [539.0, 35941.0], [532.0, 35176.0], [540.0, 36654.0], [528.0, 37148.0], [538.0, 35663.0], [537.0, 36309.0], [527.0, 35761.0], [514.0, 35889.0], [513.0, 36648.333333333336], [517.0, 36022.5], [515.0, 35404.0], [519.0, 35722.0], [518.0, 35611.0], [526.0, 35271.0], [525.0, 35815.0], [524.0, 36142.0], [523.0, 35662.0], [522.0, 36686.0], [521.0, 36219.0], [520.0, 36611.0], [535.0, 35488.0], [534.0, 36243.0], [533.0, 36678.0], [531.0, 36308.0], [529.0, 34960.0], [569.0, 35545.0], [573.0, 11569.333333333334], [574.0, 18093.333333333336], [562.0, 36245.5], [560.0, 35412.0], [572.0, 35939.0], [571.0, 35411.0], [570.0, 35462.0], [568.0, 35883.5], [551.0, 36009.0], [548.0, 36776.0], [547.0, 35924.0], [546.0, 36266.0], [545.0, 36555.0], [544.0, 36233.5], [559.0, 32590.0], [557.0, 35803.0], [555.0, 35682.0], [554.0, 36693.0], [553.0, 36677.0], [552.0, 35799.0], [566.0, 35737.0], [565.0, 35592.333333333336], [601.0, 37299.0], [606.0, 36542.5], [607.0, 37034.0], [592.0, 35810.333333333336], [594.0, 37298.0], [593.0, 36900.0], [597.0, 34131.0], [595.0, 35404.0], [604.0, 36754.0], [603.0, 34786.0], [602.0, 35107.0], [600.0, 36858.0], [583.0, 35873.0], [582.0, 35486.0], [581.0, 34681.0], [580.0, 36890.0], [579.0, 35696.0], [578.0, 37175.0], [577.0, 35972.666666666664], [589.0, 35543.5], [587.0, 36675.0], [586.0, 36068.0], [585.0, 35575.0], [584.0, 37245.0], [599.0, 36760.0], [598.0, 37300.0], [636.0, 27469.0], [614.0, 23388.5], [613.0, 37277.5], [611.0, 26551.0], [610.0, 37218.0], [609.0, 36457.0], [608.0, 27514.0], [615.0, 36489.0], [623.0, 36632.5], [621.0, 27537.0], [620.0, 36118.0], [619.0, 36644.0], [618.0, 37011.5], [616.0, 36062.0], [639.0, 36054.0], [624.0, 36986.0], [627.0, 36518.0], [625.0, 27957.0], [629.0, 36321.0], [628.0, 36156.5], [631.0, 35697.0], [630.0, 36257.0], [638.0, 36567.0], [637.0, 36333.0], [635.0, 35617.0], [634.0, 27110.0], [633.0, 36270.0], [632.0, 35641.0], [644.0, 25110.0], [643.0, 27280.0], [642.0, 27942.0], [641.0, 26692.0], [640.0, 36451.0], [766.0, 27797.0], [767.0, 28191.0], [753.0, 24730.0], [752.0, 22384.0], [755.0, 31398.0], [754.0, 31517.0], [757.0, 30676.0], [756.0, 31323.0], [765.0, 27935.0], [764.0, 28428.0], [763.0, 29491.0], [762.0, 22483.0], [761.0, 23731.0], [751.0, 32622.0], [750.0, 32354.0], [749.0, 26974.37864077671], [748.0, 25353.5], [759.0, 30450.0], [758.0, 30765.0], [792.0, 23977.0], [798.0, 22396.0], [799.0, 21637.0], [785.0, 25350.0], [784.0, 24737.0], [787.0, 24924.0], [786.0, 25398.0], [797.0, 22827.5], [795.0, 23455.0], [793.0, 23900.0], [783.0, 25643.0], [769.0, 28103.0], [768.0, 27520.0], [771.0, 28884.0], [770.0, 28867.0], [773.0, 27419.0], [772.0, 27812.0], [775.0, 27255.0], [774.0, 27019.0], [781.0, 25651.0], [780.0, 25127.0], [779.0, 26369.0], [778.0, 27149.0], [777.0, 27692.0], [776.0, 27277.0], [791.0, 23157.0], [790.0, 22732.0], [789.0, 23188.0], [788.0, 24916.0], [829.0, 23798.0], [831.0, 23138.5], [816.0, 23883.0], [819.0, 22324.5], [818.0, 23189.0], [828.0, 23361.0], [827.0, 23433.0], [826.0, 23140.0], [825.0, 23847.0], [824.0, 23561.0], [800.0, 23129.0], [815.0, 24077.0], [814.0, 21937.0], [813.0, 23980.0], [812.0, 22819.0], [811.0, 23148.0], [810.0, 23212.300000000003], [823.0, 23498.0], [822.0, 21530.0], [857.0, 22042.0], [861.0, 22008.0], [862.0, 23069.0], [849.0, 23712.0], [848.0, 23971.0], [851.0, 22795.0], [850.0, 23182.0], [853.0, 22575.0], [852.0, 22733.0], [860.0, 22779.0], [859.0, 22612.0], [858.0, 22606.0], [856.0, 23832.0], [839.0, 22921.0], [838.0, 23321.0], [837.0, 23089.0], [836.0, 22529.0], [835.0, 23363.0], [834.0, 22846.0], [833.0, 23344.0], [832.0, 22501.0], [847.0, 22460.5], [845.0, 22482.0], [844.0, 22666.0], [841.0, 24030.0], [840.0, 23387.0], [855.0, 23137.0], [854.0, 23540.0], [870.0, 22389.0], [881.0, 16043.0], [884.0, 15401.0], [876.0, 16546.0], [865.0, 23220.0], [867.0, 22404.0], [866.0, 21437.0], [869.0, 21458.0], [868.0, 22522.0], [875.0, 15678.0], [874.0, 22257.0], [873.0, 21420.0], [872.0, 22272.0], [871.0, 22048.0], [900.0, 13026.0], [899.0, 12893.0], [909.0, 13540.0], [927.0, 13336.0], [925.0, 14024.0], [914.0, 15978.25], [955.0, 15139.0], [929.0, 13415.0], [928.0, 13682.0], [942.0, 17478.539999999997], [958.0, 18468.333333333332], [945.0, 15311.0], [944.0, 15118.5], [954.0, 20718.0], [953.0, 15417.5], [952.0, 15239.333333333334], [935.0, 15548.5], [934.0, 16749.0], [947.0, 15414.5], [946.0, 15026.666666666666], [968.0, 13985.6], [963.0, 15325.0], [962.0, 15348.0], [960.0, 20393.0], [1.0, 1195.1379310344826]], "isOverall": false, "label": "https://localhost:7208", "isController": false}, {"data": [[320.3176178660047, 18318.225186104224]], "isOverall": false, "label": "https://localhost:7208-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 968.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 78.0, "minX": 1.6544545875E12, "maxY": 1381788.0, "series": [{"data": [[1.654454628E12, 30325.333333333332], [1.6544546055E12, 224968.66666666666], [1.6544546505E12, 1322728.6666666667], [1.6544546475E12, 610220.6666666666], [1.6544546115E12, 85672.66666666667], [1.654454592E12, 123181.33333333333], [1.654454634E12, 48167.333333333336], [1.6544546085E12, 101770.66666666667], [1.654454589E12, 64212.0], [1.654454631E12, 149851.33333333334], [1.6544546385E12, 48187.333333333336], [1.6544545965E12, 240860.0], [1.6544546355E12, 5356.0], [1.654454616E12, 58849.333333333336], [1.6544545935E12, 176574.66666666666], [1.654454622E12, 32109.333333333332], [1.6544546025E12, 358622.0], [1.6544545995E12, 310438.0], [1.6544546415E12, 48210.666666666664], [1.654454649E12, 1381788.0], [1.654454607E12, 155217.33333333334], [1.654454604E12, 364201.3333333333], [1.654454646E12, 652705.3333333334], [1.6544545905E12, 123208.0], [1.6544546325E12, 305252.0], [1.654454613E12, 112426.0], [1.6544545875E12, 64205.333333333336], [1.6544546295E12, 242928.0], [1.65445461E12, 74927.33333333333], [1.654454595E12, 187423.33333333334], [1.65445464E12, 5342.666666666667], [1.6544546145E12, 26773.333333333332], [1.654454637E12, 32102.666666666668], [1.654454601E12, 299932.6666666667], [1.654454643E12, 21397.333333333332], [1.6544546235E12, 20859.333333333332], [1.654454598E12, 235694.0], [1.6544546205E12, 26803.333333333332]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.654454628E12, 234.0], [1.6544546055E12, 3276.0], [1.6544546505E12, 19266.0], [1.6544546475E12, 8892.0], [1.6544546115E12, 1248.0], [1.654454592E12, 1794.0], [1.654454634E12, 702.0], [1.6544546085E12, 1482.0], [1.654454589E12, 936.0], [1.654454631E12, 2184.0], [1.6544546385E12, 702.0], [1.6544545965E12, 3510.0], [1.6544546355E12, 78.0], [1.654454616E12, 858.0], [1.6544545935E12, 2574.0], [1.654454622E12, 468.0], [1.6544546025E12, 5226.0], [1.6544545995E12, 4524.0], [1.6544546415E12, 702.0], [1.654454649E12, 20124.0], [1.654454607E12, 2262.0], [1.654454604E12, 5304.0], [1.654454646E12, 10140.0], [1.6544545905E12, 1794.0], [1.6544546325E12, 4446.0], [1.654454613E12, 1638.0], [1.6544545875E12, 936.0], [1.6544546295E12, 1326.0], [1.65445461E12, 1092.0], [1.654454595E12, 2730.0], [1.65445464E12, 78.0], [1.6544546145E12, 390.0], [1.654454637E12, 468.0], [1.654454601E12, 4368.0], [1.654454643E12, 312.0], [1.6544546235E12, 234.0], [1.654454598E12, 3432.0], [1.6544546205E12, 390.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.6544546505E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 64.42424242424241, "minX": 1.6544545875E12, "maxY": 35921.68421052631, "series": [{"data": [[1.654454628E12, 16922.88888888889], [1.6544546055E12, 206.78571428571433], [1.6544546505E12, 31252.46153846155], [1.6544546475E12, 35921.68421052631], [1.6544546115E12, 4233.1875], [1.654454592E12, 74.8260869565217], [1.654454634E12, 25265.444444444445], [1.6544546085E12, 2109.2105263157896], [1.654454589E12, 91.16666666666667], [1.654454631E12, 22682.999999999996], [1.6544546385E12, 28170.777777777777], [1.6544545965E12, 80.95555555555555], [1.6544546355E12, 26369.0], [1.654454616E12, 8463.0], [1.6544545935E12, 64.42424242424241], [1.654454622E12, 13742.0], [1.6544546025E12, 99.70149253731343], [1.6544545995E12, 102.53448275862065], [1.6544546415E12, 28452.666666666668], [1.654454649E12, 34123.95736434112], [1.654454607E12, 1263.2068965517244], [1.654454604E12, 101.5735294117647], [1.654454646E12, 28173.638461538467], [1.6544545905E12, 73.95652173913041], [1.6544546325E12, 23049.15789473685], [1.654454613E12, 5757.952380952382], [1.6544545875E12, 93.66666666666667], [1.6544546295E12, 16880.41975308642], [1.65445461E12, 3205.7857142857147], [1.654454595E12, 66.94285714285716], [1.65445464E12, 29491.0], [1.6544546145E12, 7717.6], [1.654454637E12, 27301.833333333336], [1.654454601E12, 88.82142857142856], [1.654454643E12, 28022.5], [1.6544546235E12, 13985.6], [1.654454598E12, 105.24999999999999], [1.6544546205E12, 12962.8]], "isOverall": false, "label": "https://localhost:7208", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.6544546505E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 64.21212121212122, "minX": 1.6544545875E12, "maxY": 35921.41228070175, "series": [{"data": [[1.654454628E12, 6729.444444444444], [1.6544546055E12, 206.6904761904762], [1.6544546505E12, 31252.34817813765], [1.6544546475E12, 35921.41228070175], [1.6544546115E12, 4232.875], [1.654454592E12, 74.60869565217392], [1.654454634E12, 25251.11111111111], [1.6544546085E12, 2109.0], [1.654454589E12, 90.91666666666666], [1.654454631E12, 22682.785714285717], [1.6544546385E12, 28170.44444444444], [1.6544545965E12, 80.82222222222222], [1.6544546355E12, 25659.0], [1.654454616E12, 8462.727272727272], [1.6544545935E12, 64.21212121212122], [1.654454622E12, 13741.666666666668], [1.6544546025E12, 99.59701492537314], [1.6544545995E12, 102.37931034482759], [1.6544546415E12, 28452.666666666668], [1.654454649E12, 34123.84496124031], [1.654454607E12, 1263.1034482758619], [1.654454604E12, 101.42647058823532], [1.654454646E12, 28167.59999999999], [1.6544545905E12, 73.6086956521739], [1.6544546325E12, 23048.526315789473], [1.654454613E12, 5757.380952380952], [1.6544545875E12, 93.0], [1.6544546295E12, 4572.0], [1.65445461E12, 3205.5714285714284], [1.654454595E12, 66.71428571428571], [1.65445464E12, 29490.0], [1.6544546145E12, 7713.0], [1.654454637E12, 27300.833333333336], [1.654454601E12, 88.64285714285718], [1.654454643E12, 28022.25], [1.6544546235E12, 9178.2], [1.654454598E12, 105.15909090909089], [1.6544546205E12, 12959.0]], "isOverall": false, "label": "https://localhost:7208", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.6544546505E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 23.942857142857143, "minX": 1.6544545875E12, "maxY": 12942.444444444443, "series": [{"data": [[1.654454628E12, 11202.111111111111], [1.6544546055E12, 109.02380952380955], [1.6544546505E12, 10841.850202429152], [1.6544546475E12, 8466.640350877191], [1.6544546115E12, 1208.6875], [1.654454592E12, 27.130434782608695], [1.654454634E12, 5357.888888888889], [1.6544546085E12, 705.4736842105264], [1.654454589E12, 33.416666666666664], [1.654454631E12, 3830.964285714286], [1.6544546385E12, 4963.888888888889], [1.6544545965E12, 25.08888888888888], [1.6544546355E12, 4170.0], [1.654454616E12, 2513.8181818181815], [1.6544545935E12, 24.21212121212121], [1.654454622E12, 2640.0], [1.6544546025E12, 43.358208955223866], [1.6544545995E12, 28.120689655172416], [1.6544546415E12, 7860.000000000001], [1.654454649E12, 12459.096899224805], [1.654454607E12, 385.3448275862069], [1.654454604E12, 32.41176470588234], [1.654454646E12, 10611.146153846155], [1.6544545905E12, 29.478260869565215], [1.6544546325E12, 4679.368421052633], [1.654454613E12, 1644.7142857142856], [1.6544545875E12, 31.41666666666667], [1.6544546295E12, 12942.444444444443], [1.65445461E12, 1133.0714285714284], [1.654454595E12, 23.942857142857143], [1.65445464E12, 5216.0], [1.6544546145E12, 1992.8], [1.654454637E12, 4579.5], [1.654454601E12, 28.303571428571427], [1.654454643E12, 8249.0], [1.6544546235E12, 6534.4], [1.654454598E12, 25.75], [1.6544546205E12, 2932.6]], "isOverall": false, "label": "https://localhost:7208", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.6544546505E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 54.0, "minX": 1.6544545875E12, "maxY": 38394.0, "series": [{"data": [[1.654454628E12, 20393.0], [1.6544546055E12, 533.0], [1.6544546505E12, 36690.0], [1.6544546475E12, 38394.0], [1.6544546115E12, 4733.0], [1.654454592E12, 146.0], [1.654454634E12, 25944.0], [1.6544546085E12, 2786.0], [1.654454589E12, 143.0], [1.654454631E12, 23971.0], [1.6544546385E12, 28884.0], [1.6544545965E12, 129.0], [1.6544546355E12, 26369.0], [1.654454616E12, 9637.0], [1.6544545935E12, 94.0], [1.654454622E12, 14071.0], [1.6544546025E12, 156.0], [1.6544545995E12, 274.0], [1.6544546415E12, 31517.0], [1.654454649E12, 38326.0], [1.654454607E12, 1670.0], [1.654454604E12, 192.0], [1.654454646E12, 37155.0], [1.6544545905E12, 108.0], [1.6544546325E12, 24273.0], [1.654454613E12, 6659.0], [1.6544545875E12, 187.0], [1.6544546295E12, 22410.0], [1.65445461E12, 3452.0], [1.654454595E12, 104.0], [1.65445464E12, 29491.0], [1.6544546145E12, 7957.0], [1.654454637E12, 27692.0], [1.654454601E12, 188.0], [1.654454643E12, 32622.0], [1.6544546235E12, 15387.0], [1.654454598E12, 321.0], [1.6544546205E12, 13109.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.654454628E12, 20393.0], [1.6544546055E12, 325.90000000000015], [1.6544546505E12, 33733.8], [1.6544546475E12, 37161.5], [1.6544546115E12, 4618.2], [1.654454592E12, 108.20000000000005], [1.654454634E12, 25944.0], [1.6544546085E12, 2730.0], [1.654454589E12, 137.3], [1.654454631E12, 23724.0], [1.6544546385E12, 28884.0], [1.6544545965E12, 106.8], [1.6544546355E12, 26369.0], [1.654454616E12, 9453.400000000001], [1.6544545935E12, 77.2], [1.654454622E12, 14071.0], [1.6544546025E12, 132.4], [1.6544545995E12, 169.60000000000002], [1.6544546415E12, 31517.0], [1.654454649E12, 36717.4], [1.654454607E12, 1559.0], [1.654454604E12, 142.1], [1.654454646E12, 36734.6], [1.6544545905E12, 94.60000000000002], [1.6544546325E12, 23990.0], [1.654454613E12, 6332.0], [1.6544545875E12, 180.70000000000002], [1.6544546295E12, 22323.6], [1.65445461E12, 3438.0], [1.654454595E12, 83.19999999999999], [1.65445464E12, 29491.0], [1.6544546145E12, 7957.0], [1.654454637E12, 27692.0], [1.654454601E12, 146.3], [1.654454643E12, 32622.0], [1.6544546235E12, 15387.0], [1.654454598E12, 238.5], [1.6544546205E12, 13109.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.654454628E12, 20393.0], [1.6544546055E12, 533.0], [1.6544546505E12, 36023.20000000001], [1.6544546475E12, 38307.0], [1.6544546115E12, 4733.0], [1.654454592E12, 146.0], [1.654454634E12, 25944.0], [1.6544546085E12, 2786.0], [1.654454589E12, 143.0], [1.654454631E12, 23971.0], [1.6544546385E12, 28884.0], [1.6544545965E12, 129.0], [1.6544546355E12, 26369.0], [1.654454616E12, 9637.0], [1.6544545935E12, 94.0], [1.654454622E12, 14071.0], [1.6544546025E12, 156.0], [1.6544545995E12, 274.0], [1.6544546415E12, 31517.0], [1.654454649E12, 37821.520000000004], [1.654454607E12, 1670.0], [1.654454604E12, 192.0], [1.654454646E12, 37155.0], [1.6544545905E12, 108.0], [1.6544546325E12, 24273.0], [1.654454613E12, 6659.0], [1.6544545875E12, 187.0], [1.6544546295E12, 22410.0], [1.65445461E12, 3452.0], [1.654454595E12, 104.0], [1.65445464E12, 29491.0], [1.6544546145E12, 7957.0], [1.654454637E12, 27692.0], [1.654454601E12, 188.0], [1.654454643E12, 32622.0], [1.6544546235E12, 15387.0], [1.654454598E12, 321.0], [1.6544546205E12, 13109.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.654454628E12, 20393.0], [1.6544546055E12, 447.90000000000015], [1.6544546505E12, 34517.799999999996], [1.6544546475E12, 37298.25], [1.6544546115E12, 4733.0], [1.654454592E12, 140.99999999999994], [1.654454634E12, 25944.0], [1.6544546085E12, 2786.0], [1.654454589E12, 143.0], [1.654454631E12, 23908.45], [1.6544546385E12, 28884.0], [1.6544545965E12, 121.0], [1.6544546355E12, 26369.0], [1.654454616E12, 9637.0], [1.6544545935E12, 91.19999999999999], [1.654454622E12, 14071.0], [1.6544546025E12, 147.39999999999998], [1.6544545995E12, 216.89999999999995], [1.6544546415E12, 31517.0], [1.654454649E12, 37157.25], [1.654454607E12, 1663.5], [1.654454604E12, 149.39999999999998], [1.654454646E12, 37104.3], [1.6544545905E12, 106.59999999999998], [1.6544546325E12, 24138.3], [1.654454613E12, 6628.7], [1.6544545875E12, 187.0], [1.6544546295E12, 22410.0], [1.65445461E12, 3452.0], [1.654454595E12, 98.39999999999998], [1.65445464E12, 29491.0], [1.6544546145E12, 7957.0], [1.654454637E12, 27692.0], [1.654454601E12, 178.75], [1.654454643E12, 32622.0], [1.6544546235E12, 15387.0], [1.654454598E12, 243.0], [1.6544546205E12, 13109.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.654454628E12, 20019.0], [1.6544546055E12, 109.0], [1.6544546505E12, 28265.0], [1.6544546475E12, 26551.0], [1.6544546115E12, 3839.0], [1.654454592E12, 59.0], [1.654454634E12, 24737.0], [1.6544546085E12, 1582.0], [1.654454589E12, 65.0], [1.654454631E12, 21420.0], [1.6544546385E12, 27520.0], [1.6544545965E12, 60.0], [1.6544546355E12, 26369.0], [1.654454616E12, 7849.0], [1.6544545935E12, 55.0], [1.654454622E12, 13336.0], [1.6544546025E12, 58.0], [1.6544545995E12, 61.0], [1.6544546415E12, 22483.0], [1.654454649E12, 27986.0], [1.654454607E12, 691.0], [1.654454604E12, 59.0], [1.654454646E12, 25110.0], [1.6544545905E12, 54.0], [1.6544546325E12, 21333.0], [1.654454613E12, 5225.0], [1.6544545875E12, 65.0], [1.6544546295E12, 20540.0], [1.65445461E12, 2863.0], [1.654454595E12, 56.0], [1.65445464E12, 29491.0], [1.6544546145E12, 7481.0], [1.654454637E12, 27019.0], [1.654454601E12, 56.0], [1.654454643E12, 22384.0], [1.6544546235E12, 15235.0], [1.654454598E12, 55.0], [1.6544546205E12, 12781.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.654454628E12, 20157.0], [1.6544546055E12, 186.5], [1.6544546505E12, 31065.0], [1.6544546475E12, 36074.5], [1.6544546115E12, 4165.0], [1.654454592E12, 68.0], [1.654454634E12, 25342.0], [1.6544546085E12, 1992.0], [1.654454589E12, 83.0], [1.654454631E12, 22632.5], [1.6544546385E12, 28103.0], [1.6544545965E12, 80.0], [1.6544546355E12, 26369.0], [1.654454616E12, 8427.0], [1.6544545935E12, 63.0], [1.654454622E12, 13826.5], [1.6544546025E12, 99.0], [1.6544545995E12, 83.0], [1.6544546415E12, 30676.0], [1.654454649E12, 34107.0], [1.654454607E12, 1329.0], [1.654454604E12, 92.5], [1.654454646E12, 36082.0], [1.6544545905E12, 70.0], [1.6544546325E12, 23157.0], [1.654454613E12, 5655.0], [1.6544545875E12, 77.0], [1.6544546295E12, 22023.0], [1.65445461E12, 3233.0], [1.654454595E12, 64.0], [1.65445464E12, 29491.0], [1.6544546145E12, 7671.0], [1.654454637E12, 27266.0], [1.654454601E12, 76.0], [1.654454643E12, 28542.0], [1.6544546235E12, 15278.0], [1.654454598E12, 77.5], [1.6544546205E12, 12999.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.6544546505E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 62.5, "minX": 1.0, "maxY": 35940.5, "series": [{"data": [[2.0, 31457.5], [35.0, 71.0], [37.0, 122.0], [39.0, 78.0], [43.0, 23069.0], [45.0, 133.0], [47.0, 97.0], [46.0, 95.5], [3.0, 27812.0], [4.0, 24823.0], [5.0, 13067.5], [80.0, 22054.0], [6.0, 13826.5], [96.0, 35940.5], [111.0, 27611.0], [7.0, 13806.5], [8.0, 11293.5], [139.0, 31554.0], [10.0, 6169.5], [11.0, 13590.5], [177.0, 31534.0], [189.0, 34866.0], [12.0, 1991.0], [14.0, 3233.0], [15.0, 73.0], [1.0, 18003.0], [17.0, 1032.0], [19.0, 113.0], [21.0, 1582.0], [22.0, 62.5], [23.0, 64.0], [28.0, 72.5], [29.0, 82.0], [30.0, 88.5], [31.0, 23157.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[5.0, 12014.0], [10.0, 15324.0], [80.0, 15587.5], [111.0, 27934.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 189.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 35940.0, "series": [{"data": [[2.0, 31457.5], [35.0, 71.0], [37.0, 122.0], [39.0, 77.0], [43.0, 23069.0], [45.0, 133.0], [47.0, 97.0], [46.0, 95.5], [3.0, 27812.0], [4.0, 24823.0], [5.0, 13067.0], [80.0, 22053.5], [6.0, 13826.0], [96.0, 35940.0], [111.0, 27611.0], [7.0, 13806.0], [8.0, 11293.5], [139.0, 31554.0], [10.0, 6169.5], [11.0, 13590.0], [177.0, 31534.0], [189.0, 34866.0], [12.0, 1991.0], [14.0, 3232.5], [15.0, 73.0], [1.0, 17648.0], [17.0, 1032.0], [19.0, 112.5], [21.0, 1582.0], [22.0, 62.5], [23.0, 64.0], [28.0, 72.0], [29.0, 81.0], [30.0, 88.5], [31.0, 23157.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[5.0, 0.0], [10.0, 0.0], [80.0, 0.0], [111.0, 27933.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 189.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.3333333333333333, "minX": 1.654454586E12, "maxY": 75.33333333333333, "series": [{"data": [[1.6544546055E12, 52.0], [1.654454586E12, 1.3333333333333333], [1.6544546115E12, 67.33333333333333], [1.654454592E12, 16.0], [1.6544546085E12, 60.0], [1.654454589E12, 8.0], [1.6544545965E12, 30.0], [1.654454616E12, 75.33333333333333], [1.6544545935E12, 22.0], [1.654454622E12, 44.0], [1.6544546025E12, 45.333333333333336], [1.654454619E12, 74.66666666666667], [1.6544545995E12, 37.333333333333336], [1.654454607E12, 53.333333333333336], [1.654454604E12, 46.0], [1.6544545905E12, 15.333333333333334], [1.654454613E12, 68.0], [1.6544545875E12, 7.333333333333333], [1.65445461E12, 61.333333333333336], [1.654454595E12, 23.333333333333332], [1.6544546175E12, 74.66666666666667], [1.6544546145E12, 75.33333333333333], [1.654454601E12, 38.0], [1.654454598E12, 31.333333333333332], [1.6544546205E12, 47.333333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.654454622E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.6666666666666666, "minX": 1.6544545875E12, "maxY": 172.0, "series": [{"data": [[1.654454628E12, 2.0], [1.6544546055E12, 28.0], [1.6544546505E12, 164.66666666666666], [1.6544546475E12, 76.0], [1.6544546115E12, 10.666666666666666], [1.654454592E12, 15.333333333333334], [1.654454634E12, 6.0], [1.6544546085E12, 12.666666666666666], [1.654454589E12, 8.0], [1.654454631E12, 18.666666666666668], [1.6544546385E12, 6.0], [1.6544545965E12, 30.0], [1.6544546355E12, 0.6666666666666666], [1.654454616E12, 7.333333333333333], [1.6544545935E12, 22.0], [1.654454622E12, 4.0], [1.6544546025E12, 44.666666666666664], [1.6544545995E12, 38.666666666666664], [1.6544546415E12, 6.0], [1.654454649E12, 172.0], [1.654454607E12, 19.333333333333332], [1.654454604E12, 45.333333333333336], [1.654454646E12, 16.666666666666668], [1.6544545905E12, 15.333333333333334], [1.6544546325E12, 38.0], [1.654454613E12, 14.0], [1.6544545875E12, 8.0], [1.6544546295E12, 11.333333333333334], [1.65445461E12, 9.333333333333334], [1.654454595E12, 23.333333333333332], [1.65445464E12, 0.6666666666666666], [1.6544546145E12, 3.3333333333333335], [1.654454637E12, 4.0], [1.654454601E12, 37.333333333333336], [1.654454643E12, 2.6666666666666665], [1.6544546235E12, 2.0], [1.654454598E12, 29.333333333333332], [1.6544546205E12, 3.3333333333333335]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.654454628E12, 4.0], [1.6544546235E12, 1.3333333333333333], [1.6544546295E12, 42.666666666666664]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLHandshakeException", "isController": false}, {"data": [[1.654454646E12, 70.0]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.6544546505E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.6666666666666666, "minX": 1.6544545875E12, "maxY": 172.0, "series": [{"data": [[1.654454628E12, 2.0], [1.6544546055E12, 28.0], [1.6544546505E12, 164.66666666666666], [1.6544546475E12, 76.0], [1.6544546115E12, 10.666666666666666], [1.654454592E12, 15.333333333333334], [1.654454634E12, 6.0], [1.6544546085E12, 12.666666666666666], [1.654454589E12, 8.0], [1.654454631E12, 18.666666666666668], [1.6544546385E12, 6.0], [1.6544545965E12, 30.0], [1.6544546355E12, 0.6666666666666666], [1.654454616E12, 7.333333333333333], [1.6544545935E12, 22.0], [1.654454622E12, 4.0], [1.6544546025E12, 44.666666666666664], [1.6544545995E12, 38.666666666666664], [1.6544546415E12, 6.0], [1.654454649E12, 172.0], [1.654454607E12, 19.333333333333332], [1.654454604E12, 45.333333333333336], [1.654454646E12, 16.666666666666668], [1.6544545905E12, 15.333333333333334], [1.6544546325E12, 38.0], [1.654454613E12, 14.0], [1.6544545875E12, 8.0], [1.6544546295E12, 11.333333333333334], [1.65445461E12, 9.333333333333334], [1.654454595E12, 23.333333333333332], [1.65445464E12, 0.6666666666666666], [1.6544546145E12, 3.3333333333333335], [1.654454637E12, 4.0], [1.654454601E12, 37.333333333333336], [1.654454643E12, 2.6666666666666665], [1.6544546235E12, 2.0], [1.654454598E12, 29.333333333333332], [1.6544546205E12, 3.3333333333333335]], "isOverall": false, "label": "https://localhost:7208-success", "isController": false}, {"data": [[1.654454628E12, 4.0], [1.654454646E12, 70.0], [1.6544546235E12, 1.3333333333333333], [1.6544546295E12, 42.666666666666664]], "isOverall": false, "label": "https://localhost:7208-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.6544546505E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.6666666666666666, "minX": 1.6544545875E12, "maxY": 172.0, "series": [{"data": [[1.654454628E12, 2.0], [1.6544546055E12, 28.0], [1.6544546505E12, 164.66666666666666], [1.6544546475E12, 76.0], [1.6544546115E12, 10.666666666666666], [1.654454592E12, 15.333333333333334], [1.654454634E12, 6.0], [1.6544546085E12, 12.666666666666666], [1.654454589E12, 8.0], [1.654454631E12, 18.666666666666668], [1.6544546385E12, 6.0], [1.6544545965E12, 30.0], [1.6544546355E12, 0.6666666666666666], [1.654454616E12, 7.333333333333333], [1.6544545935E12, 22.0], [1.654454622E12, 4.0], [1.6544546025E12, 44.666666666666664], [1.6544545995E12, 38.666666666666664], [1.6544546415E12, 6.0], [1.654454649E12, 172.0], [1.654454607E12, 19.333333333333332], [1.654454604E12, 45.333333333333336], [1.654454646E12, 16.666666666666668], [1.6544545905E12, 15.333333333333334], [1.6544546325E12, 38.0], [1.654454613E12, 14.0], [1.6544545875E12, 8.0], [1.6544546295E12, 11.333333333333334], [1.65445461E12, 9.333333333333334], [1.654454595E12, 23.333333333333332], [1.65445464E12, 0.6666666666666666], [1.6544546145E12, 3.3333333333333335], [1.654454637E12, 4.0], [1.654454601E12, 37.333333333333336], [1.654454643E12, 2.6666666666666665], [1.6544546235E12, 2.0], [1.654454598E12, 29.333333333333332], [1.6544546205E12, 3.3333333333333335]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.654454628E12, 4.0], [1.654454646E12, 70.0], [1.6544546235E12, 1.3333333333333333], [1.6544546295E12, 42.666666666666664]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.6544546505E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

