/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 28.0, "minX": 0.0, "maxY": 21287.0, "series": [{"data": [[0.0, 28.0], [0.1, 28.0], [0.2, 29.0], [0.3, 29.0], [0.4, 29.0], [0.5, 30.0], [0.6, 30.0], [0.7, 30.0], [0.8, 30.0], [0.9, 30.0], [1.0, 30.0], [1.1, 30.0], [1.2, 30.0], [1.3, 30.0], [1.4, 30.0], [1.5, 31.0], [1.6, 31.0], [1.7, 31.0], [1.8, 31.0], [1.9, 31.0], [2.0, 31.0], [2.1, 31.0], [2.2, 31.0], [2.3, 31.0], [2.4, 31.0], [2.5, 31.0], [2.6, 31.0], [2.7, 31.0], [2.8, 31.0], [2.9, 31.0], [3.0, 31.0], [3.1, 31.0], [3.2, 31.0], [3.3, 31.0], [3.4, 31.0], [3.5, 31.0], [3.6, 31.0], [3.7, 31.0], [3.8, 31.0], [3.9, 31.0], [4.0, 31.0], [4.1, 31.0], [4.2, 31.0], [4.3, 31.0], [4.4, 31.0], [4.5, 31.0], [4.6, 31.0], [4.7, 31.0], [4.8, 31.0], [4.9, 31.0], [5.0, 31.0], [5.1, 32.0], [5.2, 32.0], [5.3, 32.0], [5.4, 32.0], [5.5, 32.0], [5.6, 32.0], [5.7, 32.0], [5.8, 32.0], [5.9, 32.0], [6.0, 32.0], [6.1, 32.0], [6.2, 32.0], [6.3, 32.0], [6.4, 32.0], [6.5, 32.0], [6.6, 32.0], [6.7, 32.0], [6.8, 32.0], [6.9, 32.0], [7.0, 32.0], [7.1, 32.0], [7.2, 32.0], [7.3, 32.0], [7.4, 32.0], [7.5, 32.0], [7.6, 32.0], [7.7, 32.0], [7.8, 32.0], [7.9, 32.0], [8.0, 32.0], [8.1, 32.0], [8.2, 32.0], [8.3, 32.0], [8.4, 32.0], [8.5, 33.0], [8.6, 33.0], [8.7, 33.0], [8.8, 33.0], [8.9, 33.0], [9.0, 33.0], [9.1, 33.0], [9.2, 33.0], [9.3, 33.0], [9.4, 33.0], [9.5, 33.0], [9.6, 33.0], [9.7, 33.0], [9.8, 33.0], [9.9, 33.0], [10.0, 33.0], [10.1, 33.0], [10.2, 33.0], [10.3, 33.0], [10.4, 33.0], [10.5, 33.0], [10.6, 33.0], [10.7, 33.0], [10.8, 33.0], [10.9, 33.0], [11.0, 33.0], [11.1, 33.0], [11.2, 33.0], [11.3, 33.0], [11.4, 33.0], [11.5, 33.0], [11.6, 33.0], [11.7, 34.0], [11.8, 34.0], [11.9, 34.0], [12.0, 34.0], [12.1, 34.0], [12.2, 34.0], [12.3, 34.0], [12.4, 34.0], [12.5, 34.0], [12.6, 34.0], [12.7, 34.0], [12.8, 34.0], [12.9, 34.0], [13.0, 34.0], [13.1, 34.0], [13.2, 34.0], [13.3, 34.0], [13.4, 34.0], [13.5, 34.0], [13.6, 34.0], [13.7, 34.0], [13.8, 34.0], [13.9, 34.0], [14.0, 34.0], [14.1, 34.0], [14.2, 34.0], [14.3, 34.0], [14.4, 34.0], [14.5, 34.0], [14.6, 34.0], [14.7, 34.0], [14.8, 34.0], [14.9, 34.0], [15.0, 34.0], [15.1, 34.0], [15.2, 34.0], [15.3, 34.0], [15.4, 34.0], [15.5, 34.0], [15.6, 34.0], [15.7, 35.0], [15.8, 35.0], [15.9, 35.0], [16.0, 35.0], [16.1, 35.0], [16.2, 35.0], [16.3, 35.0], [16.4, 35.0], [16.5, 35.0], [16.6, 35.0], [16.7, 35.0], [16.8, 35.0], [16.9, 35.0], [17.0, 35.0], [17.1, 35.0], [17.2, 35.0], [17.3, 35.0], [17.4, 35.0], [17.5, 35.0], [17.6, 35.0], [17.7, 35.0], [17.8, 35.0], [17.9, 35.0], [18.0, 35.0], [18.1, 35.0], [18.2, 35.0], [18.3, 35.0], [18.4, 36.0], [18.5, 36.0], [18.6, 36.0], [18.7, 36.0], [18.8, 36.0], [18.9, 36.0], [19.0, 36.0], [19.1, 36.0], [19.2, 36.0], [19.3, 36.0], [19.4, 36.0], [19.5, 36.0], [19.6, 36.0], [19.7, 36.0], [19.8, 36.0], [19.9, 36.0], [20.0, 36.0], [20.1, 36.0], [20.2, 36.0], [20.3, 36.0], [20.4, 36.0], [20.5, 36.0], [20.6, 36.0], [20.7, 36.0], [20.8, 36.0], [20.9, 36.0], [21.0, 37.0], [21.1, 37.0], [21.2, 37.0], [21.3, 37.0], [21.4, 37.0], [21.5, 37.0], [21.6, 37.0], [21.7, 37.0], [21.8, 37.0], [21.9, 37.0], [22.0, 37.0], [22.1, 37.0], [22.2, 37.0], [22.3, 37.0], [22.4, 37.0], [22.5, 37.0], [22.6, 37.0], [22.7, 37.0], [22.8, 37.0], [22.9, 37.0], [23.0, 38.0], [23.1, 38.0], [23.2, 38.0], [23.3, 38.0], [23.4, 38.0], [23.5, 38.0], [23.6, 38.0], [23.7, 38.0], [23.8, 38.0], [23.9, 38.0], [24.0, 38.0], [24.1, 38.0], [24.2, 38.0], [24.3, 38.0], [24.4, 38.0], [24.5, 38.0], [24.6, 38.0], [24.7, 38.0], [24.8, 38.0], [24.9, 38.0], [25.0, 39.0], [25.1, 39.0], [25.2, 39.0], [25.3, 39.0], [25.4, 39.0], [25.5, 39.0], [25.6, 39.0], [25.7, 39.0], [25.8, 39.0], [25.9, 39.0], [26.0, 39.0], [26.1, 39.0], [26.2, 39.0], [26.3, 39.0], [26.4, 39.0], [26.5, 39.0], [26.6, 39.0], [26.7, 40.0], [26.8, 40.0], [26.9, 40.0], [27.0, 40.0], [27.1, 40.0], [27.2, 40.0], [27.3, 40.0], [27.4, 40.0], [27.5, 40.0], [27.6, 40.0], [27.7, 40.0], [27.8, 40.0], [27.9, 40.0], [28.0, 40.0], [28.1, 40.0], [28.2, 41.0], [28.3, 41.0], [28.4, 41.0], [28.5, 41.0], [28.6, 41.0], [28.7, 41.0], [28.8, 41.0], [28.9, 41.0], [29.0, 41.0], [29.1, 41.0], [29.2, 41.0], [29.3, 41.0], [29.4, 41.0], [29.5, 42.0], [29.6, 42.0], [29.7, 42.0], [29.8, 42.0], [29.9, 42.0], [30.0, 42.0], [30.1, 42.0], [30.2, 42.0], [30.3, 42.0], [30.4, 43.0], [30.5, 43.0], [30.6, 43.0], [30.7, 43.0], [30.8, 43.0], [30.9, 43.0], [31.0, 43.0], [31.1, 43.0], [31.2, 43.0], [31.3, 43.0], [31.4, 43.0], [31.5, 43.0], [31.6, 44.0], [31.7, 44.0], [31.8, 44.0], [31.9, 44.0], [32.0, 44.0], [32.1, 44.0], [32.2, 44.0], [32.3, 45.0], [32.4, 45.0], [32.5, 45.0], [32.6, 46.0], [32.7, 46.0], [32.8, 46.0], [32.9, 47.0], [33.0, 47.0], [33.1, 47.0], [33.2, 48.0], [33.3, 48.0], [33.4, 48.0], [33.5, 48.0], [33.6, 48.0], [33.7, 49.0], [33.8, 49.0], [33.9, 50.0], [34.0, 51.0], [34.1, 51.0], [34.2, 51.0], [34.3, 52.0], [34.4, 52.0], [34.5, 54.0], [34.6, 54.0], [34.7, 54.0], [34.8, 55.0], [34.9, 55.0], [35.0, 56.0], [35.1, 57.0], [35.2, 57.0], [35.3, 59.0], [35.4, 59.0], [35.5, 60.0], [35.6, 61.0], [35.7, 62.0], [35.8, 65.0], [35.9, 65.0], [36.0, 65.0], [36.1, 65.0], [36.2, 66.0], [36.3, 68.0], [36.4, 68.0], [36.5, 70.0], [36.6, 70.0], [36.7, 75.0], [36.8, 83.0], [36.9, 89.0], [37.0, 95.0], [37.1, 95.0], [37.2, 96.0], [37.3, 105.0], [37.4, 107.0], [37.5, 111.0], [37.6, 122.0], [37.7, 124.0], [37.8, 131.0], [37.9, 132.0], [38.0, 136.0], [38.1, 145.0], [38.2, 148.0], [38.3, 159.0], [38.4, 163.0], [38.5, 184.0], [38.6, 190.0], [38.7, 191.0], [38.8, 193.0], [38.9, 208.0], [39.0, 212.0], [39.1, 227.0], [39.2, 231.0], [39.3, 234.0], [39.4, 246.0], [39.5, 253.0], [39.6, 261.0], [39.7, 262.0], [39.8, 264.0], [39.9, 268.0], [40.0, 278.0], [40.1, 284.0], [40.2, 305.0], [40.3, 321.0], [40.4, 331.0], [40.5, 338.0], [40.6, 353.0], [40.7, 358.0], [40.8, 358.0], [40.9, 365.0], [41.0, 365.0], [41.1, 373.0], [41.2, 374.0], [41.3, 385.0], [41.4, 392.0], [41.5, 406.0], [41.6, 453.0], [41.7, 459.0], [41.8, 460.0], [41.9, 476.0], [42.0, 497.0], [42.1, 499.0], [42.2, 515.0], [42.3, 521.0], [42.4, 541.0], [42.5, 544.0], [42.6, 547.0], [42.7, 557.0], [42.8, 557.0], [42.9, 559.0], [43.0, 570.0], [43.1, 574.0], [43.2, 580.0], [43.3, 589.0], [43.4, 591.0], [43.5, 614.0], [43.6, 620.0], [43.7, 624.0], [43.8, 635.0], [43.9, 658.0], [44.0, 667.0], [44.1, 672.0], [44.2, 690.0], [44.3, 716.0], [44.4, 716.0], [44.5, 764.0], [44.6, 793.0], [44.7, 832.0], [44.8, 893.0], [44.9, 942.0], [45.0, 965.0], [45.1, 1008.0], [45.2, 1023.0], [45.3, 1042.0], [45.4, 1046.0], [45.5, 1089.0], [45.6, 1137.0], [45.7, 1171.0], [45.8, 1287.0], [45.9, 1330.0], [46.0, 1352.0], [46.1, 1393.0], [46.2, 1397.0], [46.3, 1462.0], [46.4, 1465.0], [46.5, 1474.0], [46.6, 1600.0], [46.7, 1658.0], [46.8, 1679.0], [46.9, 1768.0], [47.0, 1768.0], [47.1, 1794.0], [47.2, 1813.0], [47.3, 1862.0], [47.4, 1989.0], [47.5, 2004.0], [47.6, 2029.0], [47.7, 2034.0], [47.8, 2124.0], [47.9, 2135.0], [48.0, 2160.0], [48.1, 2183.0], [48.2, 2185.0], [48.3, 2236.0], [48.4, 2257.0], [48.5, 2260.0], [48.6, 2306.0], [48.7, 2307.0], [48.8, 2328.0], [48.9, 2344.0], [49.0, 2412.0], [49.1, 2453.0], [49.2, 2482.0], [49.3, 2486.0], [49.4, 2499.0], [49.5, 2506.0], [49.6, 2623.0], [49.7, 2644.0], [49.8, 2655.0], [49.9, 2691.0], [50.0, 2747.0], [50.1, 2770.0], [50.2, 2796.0], [50.3, 2799.0], [50.4, 2831.0], [50.5, 2843.0], [50.6, 2855.0], [50.7, 2925.0], [50.8, 2935.0], [50.9, 2985.0], [51.0, 3008.0], [51.1, 3041.0], [51.2, 3135.0], [51.3, 3155.0], [51.4, 3233.0], [51.5, 3302.0], [51.6, 3346.0], [51.7, 3365.0], [51.8, 3388.0], [51.9, 3407.0], [52.0, 3414.0], [52.1, 3445.0], [52.2, 3509.0], [52.3, 3525.0], [52.4, 3534.0], [52.5, 3559.0], [52.6, 3564.0], [52.7, 3658.0], [52.8, 3687.0], [52.9, 3694.0], [53.0, 3801.0], [53.1, 3823.0], [53.2, 3823.0], [53.3, 3858.0], [53.4, 3881.0], [53.5, 4030.0], [53.6, 4107.0], [53.7, 4109.0], [53.8, 4117.0], [53.9, 4204.0], [54.0, 4258.0], [54.1, 4370.0], [54.2, 4377.0], [54.3, 4413.0], [54.4, 4452.0], [54.5, 4532.0], [54.6, 4558.0], [54.7, 4656.0], [54.8, 4711.0], [54.9, 4733.0], [55.0, 4825.0], [55.1, 4949.0], [55.2, 5007.0], [55.3, 5087.0], [55.4, 5191.0], [55.5, 5332.0], [55.6, 5470.0], [55.7, 5663.0], [55.8, 5796.0], [55.9, 5944.0], [56.0, 5984.0], [56.1, 6060.0], [56.2, 6105.0], [56.3, 6415.0], [56.4, 6798.0], [56.5, 6865.0], [56.6, 6924.0], [56.7, 7423.0], [56.8, 7454.0], [56.9, 7529.0], [57.0, 7529.0], [57.1, 7983.0], [57.2, 8088.0], [57.3, 8099.0], [57.4, 8145.0], [57.5, 8156.0], [57.6, 8385.0], [57.7, 8481.0], [57.8, 8543.0], [57.9, 8582.0], [58.0, 8595.0], [58.1, 8621.0], [58.2, 8655.0], [58.3, 8656.0], [58.4, 8752.0], [58.5, 8778.0], [58.6, 8799.0], [58.7, 8950.0], [58.8, 8956.0], [58.9, 9032.0], [59.0, 9073.0], [59.1, 9074.0], [59.2, 9103.0], [59.3, 9162.0], [59.4, 9211.0], [59.5, 9640.0], [59.6, 9818.0], [59.7, 9990.0], [59.8, 10254.0], [59.9, 10616.0], [60.0, 10807.0], [60.1, 10877.0], [60.2, 10978.0], [60.3, 10999.0], [60.4, 11001.0], [60.5, 11040.0], [60.6, 11069.0], [60.7, 11235.0], [60.8, 11431.0], [60.9, 11457.0], [61.0, 11610.0], [61.1, 11663.0], [61.2, 11824.0], [61.3, 11928.0], [61.4, 12033.0], [61.5, 12320.0], [61.6, 12336.0], [61.7, 12346.0], [61.8, 12481.0], [61.9, 12547.0], [62.0, 12594.0], [62.1, 12619.0], [62.2, 12690.0], [62.3, 12720.0], [62.4, 12745.0], [62.5, 12777.0], [62.6, 12806.0], [62.7, 12868.0], [62.8, 12940.0], [62.9, 12965.0], [63.0, 13148.0], [63.1, 13187.0], [63.2, 13581.0], [63.3, 13824.0], [63.4, 14115.0], [63.5, 14209.0], [63.6, 14328.0], [63.7, 14432.0], [63.8, 14470.0], [63.9, 14515.0], [64.0, 14541.0], [64.1, 14702.0], [64.2, 14773.0], [64.3, 15044.0], [64.4, 15324.0], [64.5, 15369.0], [64.6, 15607.0], [64.7, 15672.0], [64.8, 15812.0], [64.9, 15917.0], [65.0, 16020.0], [65.1, 16057.0], [65.2, 16177.0], [65.3, 16181.0], [65.4, 16208.0], [65.5, 16223.0], [65.6, 16379.0], [65.7, 16415.0], [65.8, 16461.0], [65.9, 16462.0], [66.0, 16485.0], [66.1, 16501.0], [66.2, 16547.0], [66.3, 16550.0], [66.4, 16563.0], [66.5, 16582.0], [66.6, 16588.0], [66.7, 16592.0], [66.8, 16599.0], [66.9, 16633.0], [67.0, 16635.0], [67.1, 16636.0], [67.2, 16644.0], [67.3, 16646.0], [67.4, 16651.0], [67.5, 16657.0], [67.6, 16697.0], [67.7, 16700.0], [67.8, 16703.0], [67.9, 16710.0], [68.0, 16715.0], [68.1, 16724.0], [68.2, 16729.0], [68.3, 16732.0], [68.4, 16743.0], [68.5, 16745.0], [68.6, 16748.0], [68.7, 16772.0], [68.8, 16780.0], [68.9, 16810.0], [69.0, 16811.0], [69.1, 16820.0], [69.2, 16824.0], [69.3, 16831.0], [69.4, 16831.0], [69.5, 16837.0], [69.6, 16857.0], [69.7, 16859.0], [69.8, 16867.0], [69.9, 16870.0], [70.0, 16886.0], [70.1, 16913.0], [70.2, 16922.0], [70.3, 16928.0], [70.4, 16952.0], [70.5, 16956.0], [70.6, 16960.0], [70.7, 16962.0], [70.8, 16993.0], [70.9, 16995.0], [71.0, 17000.0], [71.1, 17008.0], [71.2, 17011.0], [71.3, 17014.0], [71.4, 17024.0], [71.5, 17027.0], [71.6, 17034.0], [71.7, 17038.0], [71.8, 17059.0], [71.9, 17067.0], [72.0, 17072.0], [72.1, 17087.0], [72.2, 17094.0], [72.3, 17111.0], [72.4, 17115.0], [72.5, 17122.0], [72.6, 17132.0], [72.7, 17142.0], [72.8, 17143.0], [72.9, 17149.0], [73.0, 17159.0], [73.1, 17172.0], [73.2, 17183.0], [73.3, 17192.0], [73.4, 17198.0], [73.5, 17202.0], [73.6, 17219.0], [73.7, 17237.0], [73.8, 17238.0], [73.9, 17240.0], [74.0, 17253.0], [74.1, 17262.0], [74.2, 17267.0], [74.3, 17267.0], [74.4, 17279.0], [74.5, 17280.0], [74.6, 17300.0], [74.7, 17305.0], [74.8, 17312.0], [74.9, 17315.0], [75.0, 17324.0], [75.1, 17327.0], [75.2, 17331.0], [75.3, 17331.0], [75.4, 17351.0], [75.5, 17367.0], [75.6, 17377.0], [75.7, 17415.0], [75.8, 17418.0], [75.9, 17441.0], [76.0, 17453.0], [76.1, 17457.0], [76.2, 17461.0], [76.3, 17465.0], [76.4, 17481.0], [76.5, 17500.0], [76.6, 17505.0], [76.7, 17506.0], [76.8, 17520.0], [76.9, 17538.0], [77.0, 17543.0], [77.1, 17548.0], [77.2, 17551.0], [77.3, 17562.0], [77.4, 17569.0], [77.5, 17604.0], [77.6, 17605.0], [77.7, 17628.0], [77.8, 17647.0], [77.9, 17647.0], [78.0, 17677.0], [78.1, 17677.0], [78.2, 17680.0], [78.3, 17685.0], [78.4, 17686.0], [78.5, 17693.0], [78.6, 17704.0], [78.7, 17708.0], [78.8, 17732.0], [78.9, 17736.0], [79.0, 17747.0], [79.1, 17765.0], [79.2, 17771.0], [79.3, 17787.0], [79.4, 17787.0], [79.5, 17793.0], [79.6, 17821.0], [79.7, 17847.0], [79.8, 17852.0], [79.9, 17853.0], [80.0, 17890.0], [80.1, 17909.0], [80.2, 17910.0], [80.3, 17915.0], [80.4, 17935.0], [80.5, 17943.0], [80.6, 17955.0], [80.7, 17957.0], [80.8, 17964.0], [80.9, 17973.0], [81.0, 17994.0], [81.1, 18015.0], [81.2, 18023.0], [81.3, 18026.0], [81.4, 18032.0], [81.5, 18036.0], [81.6, 18062.0], [81.7, 18079.0], [81.8, 18086.0], [81.9, 18101.0], [82.0, 18104.0], [82.1, 18117.0], [82.2, 18122.0], [82.3, 18135.0], [82.4, 18142.0], [82.5, 18142.0], [82.6, 18157.0], [82.7, 18200.0], [82.8, 18224.0], [82.9, 18236.0], [83.0, 18240.0], [83.1, 18269.0], [83.2, 18279.0], [83.3, 18281.0], [83.4, 18283.0], [83.5, 18294.0], [83.6, 18310.0], [83.7, 18317.0], [83.8, 18326.0], [83.9, 18333.0], [84.0, 18345.0], [84.1, 18346.0], [84.2, 18357.0], [84.3, 18363.0], [84.4, 18366.0], [84.5, 18377.0], [84.6, 18380.0], [84.7, 18382.0], [84.8, 18387.0], [84.9, 18410.0], [85.0, 18415.0], [85.1, 18417.0], [85.2, 18418.0], [85.3, 18438.0], [85.4, 18443.0], [85.5, 18460.0], [85.6, 18462.0], [85.7, 18468.0], [85.8, 18477.0], [85.9, 18489.0], [86.0, 18504.0], [86.1, 18517.0], [86.2, 18532.0], [86.3, 18538.0], [86.4, 18539.0], [86.5, 18546.0], [86.6, 18555.0], [86.7, 18559.0], [86.8, 18562.0], [86.9, 18563.0], [87.0, 18572.0], [87.1, 18574.0], [87.2, 18575.0], [87.3, 18599.0], [87.4, 18605.0], [87.5, 18619.0], [87.6, 18627.0], [87.7, 18638.0], [87.8, 18645.0], [87.9, 18652.0], [88.0, 18661.0], [88.1, 18663.0], [88.2, 18665.0], [88.3, 18681.0], [88.4, 18684.0], [88.5, 18688.0], [88.6, 18705.0], [88.7, 18718.0], [88.8, 18724.0], [88.9, 18737.0], [89.0, 18755.0], [89.1, 18773.0], [89.2, 18778.0], [89.3, 18788.0], [89.4, 18793.0], [89.5, 18794.0], [89.6, 18802.0], [89.7, 18815.0], [89.8, 18816.0], [89.9, 18828.0], [90.0, 18832.0], [90.1, 18859.0], [90.2, 18880.0], [90.3, 18884.0], [90.4, 18902.0], [90.5, 18903.0], [90.6, 18932.0], [90.7, 18939.0], [90.8, 18940.0], [90.9, 18959.0], [91.0, 18963.0], [91.1, 18986.0], [91.2, 19004.0], [91.3, 19010.0], [91.4, 19016.0], [91.5, 19020.0], [91.6, 19075.0], [91.7, 19094.0], [91.8, 19103.0], [91.9, 19109.0], [92.0, 19125.0], [92.1, 19137.0], [92.2, 19152.0], [92.3, 19162.0], [92.4, 19166.0], [92.5, 19185.0], [92.6, 19186.0], [92.7, 19198.0], [92.8, 19199.0], [92.9, 19202.0], [93.0, 19218.0], [93.1, 19221.0], [93.2, 19234.0], [93.3, 19235.0], [93.4, 19243.0], [93.5, 19252.0], [93.6, 19256.0], [93.7, 19265.0], [93.8, 19269.0], [93.9, 19290.0], [94.0, 19310.0], [94.1, 19318.0], [94.2, 19325.0], [94.3, 19329.0], [94.4, 19337.0], [94.5, 19341.0], [94.6, 19344.0], [94.7, 19358.0], [94.8, 19379.0], [94.9, 19389.0], [95.0, 19391.0], [95.1, 19421.0], [95.2, 19423.0], [95.3, 19438.0], [95.4, 19442.0], [95.5, 19457.0], [95.6, 19484.0], [95.7, 19496.0], [95.8, 19498.0], [95.9, 19498.0], [96.0, 19505.0], [96.1, 19558.0], [96.2, 19588.0], [96.3, 19594.0], [96.4, 19603.0], [96.5, 19656.0], [96.6, 19668.0], [96.7, 19694.0], [96.8, 19704.0], [96.9, 19718.0], [97.0, 19724.0], [97.1, 19733.0], [97.2, 19737.0], [97.3, 19763.0], [97.4, 19856.0], [97.5, 19897.0], [97.6, 19908.0], [97.7, 19928.0], [97.8, 19935.0], [97.9, 20030.0], [98.0, 20074.0], [98.1, 20091.0], [98.2, 20091.0], [98.3, 20110.0], [98.4, 20147.0], [98.5, 20182.0], [98.6, 20250.0], [98.7, 20285.0], [98.8, 20321.0], [98.9, 20362.0], [99.0, 20384.0], [99.1, 20454.0], [99.2, 20509.0], [99.3, 20557.0], [99.4, 20578.0], [99.5, 20614.0], [99.6, 20708.0], [99.7, 20736.0], [99.8, 21030.0], [99.9, 21071.0]], "isOverall": false, "label": "insideairbnb docker home response compression", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 600.0, "series": [{"data": [[0.0, 600.0], [100.0, 26.0], [200.0, 22.0], [300.0, 20.0], [400.0, 11.0], [500.0, 21.0], [600.0, 13.0], [700.0, 6.0], [800.0, 4.0], [900.0, 4.0], [1000.0, 8.0], [1100.0, 3.0], [1200.0, 1.0], [1300.0, 6.0], [1400.0, 5.0], [1500.0, 1.0], [1600.0, 4.0], [1700.0, 5.0], [1800.0, 3.0], [1900.0, 2.0], [2000.0, 5.0], [2100.0, 7.0], [2200.0, 6.0], [2300.0, 6.0], [2400.0, 8.0], [2500.0, 2.0], [2600.0, 6.0], [2800.0, 6.0], [2700.0, 6.0], [2900.0, 4.0], [3000.0, 4.0], [3100.0, 2.0], [3300.0, 6.0], [3200.0, 3.0], [3400.0, 5.0], [3500.0, 7.0], [3600.0, 5.0], [3700.0, 1.0], [3800.0, 7.0], [3900.0, 1.0], [4000.0, 2.0], [4300.0, 3.0], [4200.0, 4.0], [4100.0, 4.0], [4500.0, 4.0], [4400.0, 2.0], [4600.0, 2.0], [4700.0, 2.0], [4800.0, 3.0], [5000.0, 4.0], [5100.0, 1.0], [4900.0, 1.0], [5300.0, 2.0], [5600.0, 1.0], [5400.0, 1.0], [5700.0, 2.0], [5800.0, 1.0], [6100.0, 1.0], [5900.0, 2.0], [6000.0, 2.0], [6300.0, 1.0], [6400.0, 2.0], [6800.0, 2.0], [6700.0, 1.0], [6900.0, 1.0], [7400.0, 3.0], [7300.0, 1.0], [7500.0, 2.0], [7900.0, 1.0], [7700.0, 1.0], [8000.0, 3.0], [8100.0, 3.0], [8500.0, 4.0], [8300.0, 1.0], [8200.0, 1.0], [8400.0, 2.0], [8600.0, 5.0], [8700.0, 5.0], [9000.0, 6.0], [8800.0, 1.0], [9100.0, 2.0], [8900.0, 2.0], [9200.0, 2.0], [9600.0, 2.0], [9800.0, 1.0], [10200.0, 1.0], [9900.0, 2.0], [10600.0, 2.0], [10400.0, 1.0], [10800.0, 3.0], [11200.0, 1.0], [11000.0, 4.0], [10900.0, 3.0], [11100.0, 1.0], [11300.0, 1.0], [11500.0, 1.0], [11400.0, 2.0], [11600.0, 2.0], [11700.0, 1.0], [11800.0, 2.0], [12000.0, 2.0], [11900.0, 1.0], [12700.0, 6.0], [12500.0, 3.0], [12300.0, 5.0], [12600.0, 3.0], [12400.0, 1.0], [13100.0, 3.0], [12900.0, 3.0], [13000.0, 1.0], [12800.0, 2.0], [13600.0, 1.0], [13800.0, 2.0], [13500.0, 1.0], [14100.0, 1.0], [14200.0, 1.0], [14300.0, 2.0], [14600.0, 1.0], [14400.0, 4.0], [14500.0, 2.0], [14700.0, 2.0], [15300.0, 2.0], [15000.0, 2.0], [15100.0, 1.0], [15800.0, 2.0], [15600.0, 2.0], [15500.0, 1.0], [15700.0, 1.0], [16000.0, 3.0], [15900.0, 1.0], [16100.0, 4.0], [16200.0, 3.0], [16300.0, 2.0], [16500.0, 12.0], [16700.0, 19.0], [16600.0, 14.0], [16400.0, 6.0], [16800.0, 19.0], [17400.0, 13.0], [17100.0, 20.0], [16900.0, 15.0], [17000.0, 20.0], [17200.0, 18.0], [17300.0, 18.0], [17600.0, 18.0], [17500.0, 16.0], [17900.0, 15.0], [17800.0, 8.0], [17700.0, 16.0], [18000.0, 14.0], [18300.0, 21.0], [18200.0, 14.0], [18100.0, 13.0], [18400.0, 18.0], [18600.0, 20.0], [19300.0, 17.0], [19400.0, 14.0], [19200.0, 19.0], [18900.0, 12.0], [19000.0, 10.0], [19100.0, 17.0], [18700.0, 16.0], [18800.0, 13.0], [18500.0, 22.0], [19600.0, 7.0], [19700.0, 10.0], [19500.0, 7.0], [20200.0, 4.0], [20000.0, 6.0], [20100.0, 4.0], [20300.0, 5.0], [19900.0, 6.0], [19800.0, 2.0], [20400.0, 2.0], [20600.0, 2.0], [20500.0, 4.0], [20700.0, 3.0], [21000.0, 3.0], [21200.0, 1.0]], "isOverall": false, "label": "insideairbnb docker home response compression", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 21200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 70.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1.500ms"], [2, "Requests having \nresponse time > 1.500ms"], [3, "Requests in error"]], "maxY": 862.0, "series": [{"data": [[0.0, 680.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 70.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1.500ms", "isController": false}, {"data": [[2.0, 862.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1.500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.6545269145E12, "maxY": 1.0, "series": [{"data": [[1.6545269655E12, 1.0], [1.6545269235E12, 1.0], [1.654526946E12, 1.0], [1.6545269265E12, 1.0], [1.654526949E12, 1.0], [1.6545269295E12, 1.0], [1.654526952E12, 1.0], [1.6545269325E12, 1.0], [1.654526934E12, 1.0], [1.6545269565E12, 1.0], [1.6545269145E12, 1.0], [1.654526937E12, 1.0], [1.6545269595E12, 1.0], [1.6545269175E12, 1.0], [1.65452694E12, 1.0], [1.6545269625E12, 1.0], [1.6545269205E12, 1.0], [1.654526943E12, 1.0], [1.6545269445E12, 1.0], [1.654526925E12, 1.0], [1.6545269475E12, 1.0], [1.654526928E12, 1.0], [1.6545269505E12, 1.0], [1.654526931E12, 1.0], [1.654526955E12, 1.0], [1.6545269355E12, 1.0], [1.654526958E12, 1.0], [1.654526916E12, 1.0], [1.6545269385E12, 1.0], [1.654526961E12, 1.0], [1.654526919E12, 1.0], [1.6545269415E12, 1.0], [1.654526964E12, 1.0], [1.654526922E12, 1.0]], "isOverall": false, "label": "parallel bzm - Parallel", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.6545269655E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 77.0, "minX": 1.0, "maxY": 21287.0, "series": [{"data": [[2.0, 88.59154929577468], [3.0, 250.9], [4.0, 946.3684210526316], [5.0, 1806.1999999999998], [6.0, 77.0], [7.0, 8513.0], [8.0, 5623.333333333333], [9.0, 2244.75], [10.0, 5679.0], [11.0, 8785.5], [12.0, 8484.0], [13.0, 8614.0], [14.0, 227.0], [15.0, 16672.5], [16.0, 255.0], [17.0, 11346.333333333334], [18.0, 17740.0], [19.0, 305.0], [20.0, 273.3333333333333], [21.0, 7353.714285714285], [22.0, 348.0], [23.0, 5931.833333333334], [24.0, 279.0], [25.0, 8748.5], [26.0, 4537.5], [27.0, 5863.333333333333], [28.0, 8736.5], [30.0, 17430.5], [31.0, 201.0], [32.0, 9008.25], [33.0, 17129.0], [35.0, 16485.0], [34.0, 19856.0], [37.0, 16811.0], [36.0, 17505.0], [39.0, 6219.0], [38.0, 17280.0], [40.0, 574.0], [41.0, 16856.5], [43.0, 17964.0], [42.0, 17034.0], [45.0, 8605.0], [44.0, 8544.5], [47.0, 16462.0], [46.0, 17027.0], [49.0, 8643.0], [48.0, 8832.0], [51.0, 3086.8571428571427], [50.0, 3041.25], [53.0, 2254.8181818181815], [52.0, 3555.1666666666665], [54.0, 6045.0], [55.0, 2612.5555555555557], [56.0, 6011.666666666667], [57.0, 17890.0], [59.0, 6571.666666666666], [58.0, 590.0], [61.0, 3750.7], [60.0, 426.4], [63.0, 753.625], [62.0, 925.0], [64.0, 7313.0], [67.0, 9128.0], [66.0, 6357.0], [65.0, 4581.8], [68.0, 8888.5], [71.0, 18627.0], [70.0, 17935.0], [69.0, 19594.0], [75.0, 17628.0], [74.0, 17994.0], [73.0, 16646.0], [72.0, 17266.0], [79.0, 16636.0], [78.0, 17032.5], [76.0, 17042.0], [83.0, 17454.5], [81.0, 16886.0], [80.0, 17500.0], [87.0, 9674.5], [86.0, 17263.0], [84.0, 16384.0], [91.0, 9310.0], [90.0, 9908.0], [89.0, 19166.0], [88.0, 17681.0], [93.0, 10122.0], [92.0, 5662.4], [95.0, 17139.0], [99.0, 20110.0], [98.0, 19908.0], [97.0, 18605.0], [96.0, 16582.0], [103.0, 18373.0], [102.0, 16956.0], [101.0, 17025.0], [100.0, 17349.0], [106.0, 17267.0], [105.0, 17132.0], [104.0, 16588.0], [111.0, 17260.0], [110.0, 17548.0], [109.0, 17968.0], [108.0, 17780.0], [115.0, 17680.0], [114.0, 16820.0], [113.0, 19502.0], [112.0, 17771.0], [119.0, 20147.0], [118.0, 18684.0], [117.0, 17973.0], [116.0, 17441.0], [123.0, 17122.0], [122.0, 18816.0], [121.0, 17866.5], [127.0, 19325.0], [126.0, 16824.0], [125.0, 17418.0], [124.0, 17548.0], [132.0, 9834.5], [134.0, 9854.5], [135.0, 9006.0], [133.0, 16837.0], [131.0, 16962.0], [130.0, 16697.5], [128.0, 16501.0], [136.0, 7673.666666666667], [143.0, 18788.0], [142.0, 19322.0], [141.0, 18141.0], [140.0, 17159.0], [139.0, 18816.0], [138.0, 16958.0], [137.0, 17291.0], [151.0, 17148.0], [150.0, 17761.0], [149.0, 17793.0], [148.0, 17125.0], [146.0, 17691.0], [145.0, 19724.0], [144.0, 19897.0], [159.0, 17520.0], [158.0, 17852.0], [157.0, 17853.0], [156.0, 19408.0], [155.0, 17736.0], [154.0, 17693.0], [153.0, 17787.0], [152.0, 18688.0], [165.0, 7664.0], [166.0, 6606.75], [164.0, 7062.666666666667], [167.0, 17312.0], [163.0, 17613.0], [162.0, 17415.0], [161.0, 18605.0], [160.0, 16996.0], [169.0, 10162.0], [168.0, 2354.5], [171.0, 5056.333333333334], [170.0, 6570.5], [174.0, 2506.75], [173.0, 2269.5], [175.0, 18008.0], [172.0, 18326.0], [183.0, 18271.0], [182.0, 17202.0], [181.0, 17351.0], [180.0, 17457.0], [179.0, 18348.0], [178.0, 17300.0], [177.0, 17551.0], [176.0, 18364.0], [190.0, 18240.0], [189.0, 16223.0], [188.0, 17457.0], [186.0, 16811.0], [185.0, 16485.0], [184.0, 19231.0], [198.0, 17884.0], [197.0, 17747.0], [196.0, 19016.0], [195.0, 18546.0], [194.0, 18875.0], [193.0, 18055.0], [202.0, 4058.076923076923], [204.0, 7328.0], [201.0, 11252.0], [207.0, 17657.0], [206.0, 18573.0], [205.0, 16732.0], [203.0, 17143.0], [200.0, 17942.0], [215.0, 18468.0], [214.0, 17910.0], [213.0, 17418.666666666668], [210.0, 18517.0], [209.0, 17481.0], [208.0, 17765.0], [222.0, 8452.4], [221.0, 2694.4], [219.0, 2808.5], [223.0, 17113.0], [220.0, 18638.0], [218.0, 16697.0], [217.0, 16766.0], [216.0, 18493.0], [230.0, 10554.5], [228.0, 6339.25], [227.0, 10291.5], [225.0, 9897.5], [224.0, 8012.333333333333], [231.0, 10589.5], [226.0, 17677.0], [232.0, 3952.0], [239.0, 18344.0], [237.0, 17698.0], [236.0, 18142.0], [235.0, 17011.0], [234.0, 18489.0], [233.0, 17963.0], [247.0, 18085.5], [246.0, 17519.0], [244.0, 17007.0], [243.0, 17109.0], [242.0, 17599.0], [241.0, 18823.0], [255.0, 17331.0], [254.0, 18194.0], [253.0, 17538.0], [252.0, 17543.0], [251.0, 17329.0], [250.0, 18520.0], [249.0, 17014.0], [248.0, 17301.0], [270.0, 11125.5], [271.0, 10342.0], [269.0, 11372.75], [268.0, 3365.0], [267.0, 10831.0], [266.0, 8562.0], [264.0, 8272.0], [265.0, 16699.0], [263.0, 9628.5], [257.0, 18333.0], [256.0, 18417.0], [259.0, 18574.0], [258.0, 17072.0], [262.0, 16824.0], [261.0, 17465.0], [260.0, 17239.0], [286.0, 5825.571428571428], [274.0, 10428.0], [273.0, 7578.5], [272.0, 18563.0], [278.0, 18023.0], [277.0, 18363.0], [276.0, 19438.0], [283.0, 7975.0], [282.0, 16859.0], [284.0, 10459.5], [275.0, 17847.0], [281.0, 10868.5], [280.0, 10705.75], [287.0, 8168.0], [285.0, 18932.0], [289.0, 10497.0], [294.0, 6898.2], [295.0, 18015.0], [288.0, 19329.0], [293.0, 12823.666666666666], [292.0, 3161.0], [303.0, 16563.0], [297.0, 19590.0], [296.0, 17032.0], [302.0, 19455.0], [301.0, 17382.5], [291.0, 19318.0], [290.0, 18661.0], [299.0, 17315.0], [298.0, 18417.0], [318.0, 18653.0], [319.0, 19202.0], [317.0, 18903.0], [316.0, 18269.0], [315.0, 17955.0], [314.0, 18828.0], [313.0, 19124.0], [312.0, 19423.0], [311.0, 18415.0], [305.0, 17899.0], [304.0, 19186.0], [307.0, 17183.0], [306.0, 17188.0], [310.0, 19484.0], [309.0, 18032.0], [308.0, 18973.0], [335.0, 6831.0], [333.0, 4117.0], [331.0, 11734.5], [330.0, 7824.5], [334.0, 17936.0], [332.0, 18387.0], [323.0, 16780.0], [322.0, 16995.0], [321.0, 18559.0], [320.0, 19004.0], [329.0, 18532.0], [328.0, 19003.0], [327.0, 18584.5], [325.0, 18724.0], [324.0, 18793.0], [349.0, 11097.0], [348.0, 7040.8], [344.0, 11611.0], [345.0, 18342.0], [347.0, 18281.0], [346.0, 19243.0], [343.0, 10710.5], [342.0, 9578.666666666668], [341.0, 11631.5], [340.0, 9062.666666666668], [339.0, 7188.6], [338.0, 17367.0], [337.0, 18366.0], [336.0, 17918.0], [351.0, 18345.0], [350.0, 18224.0], [366.0, 18357.0], [367.0, 18114.0], [365.0, 18721.0], [364.0, 18036.0], [363.0, 18104.0], [362.0, 18956.0], [361.0, 19423.0], [360.0, 18940.0], [359.0, 18705.0], [352.0, 18382.0], [355.0, 18477.5], [353.0, 19290.0], [358.0, 18728.0], [357.0, 17353.0], [356.0, 18147.0], [382.0, 18986.5], [383.0, 19077.0], [380.0, 19726.0], [371.0, 18539.0], [370.0, 18448.0], [369.0, 18477.0], [368.0, 18032.0], [379.0, 18562.0], [378.0, 18432.0], [377.0, 18392.0], [376.0, 18902.0], [375.0, 19185.0], [374.0, 18885.0], [373.0, 21287.0], [372.0, 21071.0], [398.0, 19519.0], [392.0, 7348.0], [391.0, 11925.0], [393.0, 11243.666666666666], [389.0, 7423.0], [388.0, 19137.0], [390.0, 19377.0], [399.0, 18157.0], [396.0, 19166.0], [387.0, 18638.0], [386.0, 20263.0], [384.0, 19104.0], [395.0, 19464.0], [394.0, 18122.0], [412.0, 19235.0], [405.0, 2486.0], [404.0, 9002.0], [403.0, 6105.0], [415.0, 19038.0], [414.0, 20477.0], [413.0, 19358.0], [411.0, 19527.2], [400.0, 19199.0], [430.0, 19249.0], [431.0, 19421.0], [428.0, 19234.0], [427.0, 19094.0], [426.0, 19765.25], [422.0, 19379.0], [421.0, 20729.0], [420.0, 20509.0], [419.0, 19311.5], [417.0, 19837.5], [445.0, 18681.0], [446.0, 20250.0], [444.0, 19329.0], [435.0, 18412.0], [434.0, 18815.0], [433.0, 19129.5], [443.0, 18377.0], [442.0, 19197.0], [441.0, 18669.0], [440.0, 18963.0], [439.0, 20362.0], [438.0, 19020.0], [437.0, 19339.0], [436.0, 18443.0], [461.0, 18288.0], [463.0, 20102.0], [460.0, 19310.0], [451.0, 18410.0], [450.0, 18252.0], [449.0, 20030.0], [448.0, 19253.0], [459.0, 19903.0], [458.0, 19737.0], [457.0, 19935.0], [456.0, 20736.0], [455.0, 19588.0], [454.0, 18819.0], [453.0, 18556.0], [452.0, 18135.0], [478.0, 18794.0], [479.0, 18773.0], [477.0, 20614.0], [476.0, 20182.0], [475.0, 19010.0], [474.0, 20074.0], [473.0, 18971.0], [471.0, 19372.0], [465.0, 18725.5], [467.0, 20562.0], [466.0, 18765.0], [470.0, 18560.0], [469.0, 18346.0], [468.0, 20557.0], [494.0, 19662.0], [495.0, 20138.0], [493.0, 20241.0], [483.0, 19509.333333333332], [480.0, 20321.0], [491.0, 19299.0], [490.0, 20388.0], [489.0, 19928.0], [488.0, 19615.0], [487.0, 19237.0], [486.0, 20384.0], [485.0, 19266.0], [484.0, 19221.0], [510.0, 19269.0], [496.0, 11808.0], [497.0, 20099.0], [503.0, 20085.0], [502.0, 19699.0], [501.0, 20091.0], [500.0, 19125.0], [498.0, 6881.0], [511.0, 19558.0], [509.0, 19442.0], [508.0, 19278.0], [499.0, 19451.0], [506.0, 19152.0], [505.0, 19773.0], [504.0, 19211.0], [531.0, 17217.5], [543.0, 16849.5], [537.0, 17205.0], [536.0, 18079.0], [518.0, 19455.5], [516.0, 19763.0], [515.0, 16378.5], [513.0, 19208.0], [535.0, 18024.0], [533.0, 17377.0], [532.0, 17677.0], [529.0, 15537.666666666666], [526.0, 18638.0], [525.0, 18500.5], [523.0, 13581.0], [522.0, 14702.0], [521.0, 19344.0], [520.0, 19444.5], [547.0, 11140.666666666666], [558.0, 12016.0], [544.0, 11082.0], [559.0, 16462.0], [557.0, 10358.333333333334], [555.0, 8305.8], [556.0, 16592.0], [552.0, 13055.0], [554.0, 16857.0], [553.0, 16872.0], [551.0, 10111.333333333334], [550.0, 17450.0], [568.0, 16470.333333333332], [571.0, 16387.0], [569.0, 16172.0], [575.0, 15044.0], [561.0, 10999.0], [560.0, 16208.0], [563.0, 15865.0], [562.0, 16057.0], [565.0, 16177.0], [564.0, 16187.0], [574.0, 14439.333333333334], [549.0, 12728.5], [548.0, 6924.0], [546.0, 10924.0], [545.0, 12655.0], [594.0, 14328.0], [607.0, 13644.888888888889], [582.0, 12940.0], [581.0, 14392.5], [579.0, 14773.0], [578.0, 15002.0], [577.0, 15607.0], [576.0, 15763.0], [598.0, 14353.0], [597.0, 15812.0], [595.0, 14515.0], [593.0, 14541.0], [592.0, 12558.0], [591.0, 12346.0], [590.0, 15672.0], [589.0, 13181.0], [588.0, 12619.0], [586.0, 15596.0], [585.0, 14449.0], [584.0, 12814.5], [622.0, 14647.0], [633.0, 8111.0], [632.0, 11457.0], [613.0, 12547.0], [612.0, 12965.0], [611.0, 10877.0], [610.0, 10486.0], [609.0, 12720.0], [608.0, 11148.0], [631.0, 13038.25], [627.0, 12256.0], [626.0, 12931.0], [621.0, 12786.0], [620.0, 13089.0], [619.0, 12320.0], [618.0, 12806.0], [617.0, 11862.0], [616.0, 12513.0], [656.0, 8033.0], [660.0, 8741.0], [663.0, 8054.142857142858], [662.0, 8966.0], [661.0, 9889.0], [659.0, 8512.75], [658.0, 5984.0], [657.0, 10028.0], [653.0, 6381.0], [664.0, 10616.0], [646.0, 9023.0], [644.0, 11588.0], [643.0, 10600.599999999999], [654.0, 9798.5], [652.0, 9466.0], [651.0, 9723.0], [650.0, 9162.0], [649.0, 9290.0], [648.0, 9612.5], [1.0, 156.5]], "isOverall": false, "label": "insideairbnb docker home response compression", "isController": false}, {"data": [[182.7146401985112, 7730.357320099249]], "isOverall": false, "label": "insideairbnb docker home response compression-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 664.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 156.0, "minX": 1.6545269145E12, "maxY": 1087843.3333333333, "series": [{"data": [[1.6545269655E12, 701883.3333333334], [1.6545269235E12, 235846.66666666666], [1.654526946E12, 10730.0], [1.6545269265E12, 300210.0], [1.654526949E12, 176920.0], [1.6545269295E12, 359013.3333333333], [1.654526952E12, 128623.33333333333], [1.6545269325E12, 418170.0], [1.654526934E12, 391076.6666666667], [1.6545269565E12, 128670.0], [1.6545269145E12, 58966.666666666664], [1.654526937E12, 423323.3333333333], [1.6545269595E12, 32166.666666666668], [1.6545269175E12, 117966.66666666667], [1.65452694E12, 225093.33333333334], [1.6545269625E12, 1087843.3333333333], [1.6545269205E12, 176786.66666666666], [1.654526943E12, 251930.0], [1.6545269445E12, 64353.333333333336], [1.654526925E12, 240983.33333333334], [1.6545269475E12, 101836.66666666667], [1.654526928E12, 300086.6666666667], [1.6545269505E12, 139283.33333333334], [1.654526931E12, 359116.6666666667], [1.654526955E12, 166163.33333333334], [1.6545269355E12, 262516.6666666667], [1.654526958E12, 112503.33333333333], [1.654526916E12, 58996.666666666664], [1.6545269385E12, 85773.33333333333], [1.654526961E12, 251743.33333333334], [1.654526919E12, 117780.0], [1.6545269415E12, 198283.33333333334], [1.654526964E12, 771563.3333333334], [1.654526922E12, 182203.33333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6545269655E12, 10218.0], [1.6545269235E12, 3432.0], [1.654526946E12, 156.0], [1.6545269265E12, 4368.0], [1.654526949E12, 2574.0], [1.6545269295E12, 5226.0], [1.654526952E12, 1872.0], [1.6545269325E12, 6084.0], [1.654526934E12, 5694.0], [1.6545269565E12, 1872.0], [1.6545269145E12, 858.0], [1.654526937E12, 6162.0], [1.6545269595E12, 468.0], [1.6545269175E12, 1716.0], [1.65452694E12, 3276.0], [1.6545269625E12, 15834.0], [1.6545269205E12, 2574.0], [1.654526943E12, 3666.0], [1.6545269445E12, 936.0], [1.654526925E12, 3510.0], [1.6545269475E12, 1482.0], [1.654526928E12, 4368.0], [1.6545269505E12, 2028.0], [1.654526931E12, 5226.0], [1.654526955E12, 2418.0], [1.6545269355E12, 3822.0], [1.654526958E12, 1638.0], [1.654526916E12, 858.0], [1.6545269385E12, 1248.0], [1.654526961E12, 3666.0], [1.654526919E12, 1716.0], [1.6545269415E12, 2886.0], [1.654526964E12, 11232.0], [1.654526922E12, 2652.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.6545269655E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 34.46428571428573, "minX": 1.6545269145E12, "maxY": 19171.914893617024, "series": [{"data": [[1.6545269655E12, 17448.885496183208], [1.6545269235E12, 36.84090909090909], [1.654526946E12, 5203.0], [1.6545269265E12, 34.46428571428573], [1.654526949E12, 8501.545454545456], [1.6545269295E12, 37.089552238805965], [1.654526952E12, 12468.70833333333], [1.6545269325E12, 38.205128205128204], [1.654526934E12, 64.2876712328767], [1.6545269565E12, 15841.208333333332], [1.6545269145E12, 64.45454545454547], [1.654526937E12, 778.0126582278482], [1.6545269595E12, 16614.333333333332], [1.6545269175E12, 35.63636363636363], [1.65452694E12, 2631.3809523809523], [1.6545269625E12, 18878.90640394088], [1.6545269205E12, 34.96969696969696], [1.654526943E12, 3885.744680851064], [1.6545269445E12, 5085.416666666667], [1.654526925E12, 36.333333333333336], [1.6545269475E12, 7352.263157894737], [1.654526928E12, 36.14285714285713], [1.6545269505E12, 10266.307692307693], [1.654526931E12, 35.97014925373134], [1.654526955E12, 13969.161290322583], [1.6545269355E12, 388.4489795918366], [1.654526958E12, 17130.190476190477], [1.654526916E12, 136.72727272727272], [1.6545269385E12, 1796.5], [1.654526961E12, 19171.914893617024], [1.654526919E12, 38.727272727272734], [1.6545269415E12, 3275.1081081081074], [1.654526964E12, 17791.722222222223], [1.654526922E12, 34.58823529411765]], "isOverall": false, "label": "insideairbnb docker home response compression", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.6545269655E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 34.267857142857146, "minX": 1.6545269145E12, "maxY": 19171.595744680846, "series": [{"data": [[1.6545269655E12, 17448.66412213741], [1.6545269235E12, 36.5], [1.654526946E12, 5202.0], [1.6545269265E12, 34.267857142857146], [1.654526949E12, 8500.878787878788], [1.6545269295E12, 36.955223880597], [1.654526952E12, 12468.249999999998], [1.6545269325E12, 37.96153846153845], [1.654526934E12, 63.78082191780822], [1.6545269565E12, 15840.583333333332], [1.6545269145E12, 63.81818181818181], [1.654526937E12, 776.7848101265823], [1.6545269595E12, 16614.333333333332], [1.6545269175E12, 35.36363636363636], [1.65452694E12, 2630.7142857142862], [1.6545269625E12, 18878.679802955663], [1.6545269205E12, 34.666666666666664], [1.654526943E12, 3885.5106382978724], [1.6545269445E12, 5084.166666666666], [1.654526925E12, 36.15555555555555], [1.6545269475E12, 7352.105263157895], [1.654526928E12, 35.89285714285714], [1.6545269505E12, 10265.346153846156], [1.654526931E12, 35.76119402985075], [1.654526955E12, 13968.483870967744], [1.6545269355E12, 387.6734693877551], [1.654526958E12, 17129.285714285714], [1.654526916E12, 136.36363636363635], [1.6545269385E12, 1796.0], [1.654526961E12, 19171.595744680846], [1.654526919E12, 38.63636363636364], [1.6545269415E12, 3274.243243243243], [1.654526964E12, 17791.229166666657], [1.654526922E12, 34.323529411764724]], "isOverall": false, "label": "insideairbnb docker home response compression", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.6545269655E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 5.44776119402985, "minX": 1.6545269145E12, "maxY": 1405.1875, "series": [{"data": [[1.6545269655E12, 961.3816793893129], [1.6545269235E12, 8.5], [1.654526946E12, 402.5], [1.6545269265E12, 5.821428571428573], [1.654526949E12, 455.6363636363637], [1.6545269295E12, 5.537313432835821], [1.654526952E12, 454.2083333333333], [1.6545269325E12, 5.961538461538463], [1.654526934E12, 8.931506849315067], [1.6545269565E12, 587.6666666666666], [1.6545269145E12, 9.636363636363637], [1.654526937E12, 92.21518987341773], [1.6545269595E12, 811.8333333333333], [1.6545269175E12, 6.636363636363636], [1.65452694E12, 181.88095238095238], [1.6545269625E12, 1181.5911330049266], [1.6545269205E12, 6.727272727272728], [1.654526943E12, 565.1063829787236], [1.6545269445E12, 446.8333333333333], [1.654526925E12, 7.0888888888888895], [1.6545269475E12, 526.6315789473684], [1.654526928E12, 6.339285714285713], [1.6545269505E12, 665.1153846153844], [1.654526931E12, 5.44776119402985], [1.654526955E12, 687.7096774193549], [1.6545269355E12, 22.3265306122449], [1.654526958E12, 570.4285714285714], [1.654526916E12, 16.81818181818182], [1.6545269385E12, 53.74999999999999], [1.654526961E12, 604.7446808510637], [1.654526919E12, 7.090909090909091], [1.6545269415E12, 402.4864864864865], [1.654526964E12, 1405.1875], [1.654526922E12, 6.382352941176469]], "isOverall": false, "label": "insideairbnb docker home response compression", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.6545269655E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 28.0, "minX": 1.6545269145E12, "maxY": 21287.0, "series": [{"data": [[1.6545269655E12, 20147.0], [1.6545269235E12, 51.0], [1.654526946E12, 6881.0], [1.6545269265E12, 48.0], [1.654526949E12, 11235.0], [1.6545269295E12, 55.0], [1.654526952E12, 14647.0], [1.6545269325E12, 59.0], [1.654526934E12, 160.0], [1.6545269565E12, 16872.0], [1.6545269145E12, 134.0], [1.654526937E12, 1768.0], [1.6545269595E12, 18638.0], [1.6545269175E12, 50.0], [1.65452694E12, 4389.0], [1.6545269625E12, 21287.0], [1.6545269205E12, 47.0], [1.654526943E12, 6471.0], [1.6545269445E12, 7529.0], [1.654526925E12, 67.0], [1.6545269475E12, 9103.0], [1.654526928E12, 72.0], [1.6545269505E12, 12033.0], [1.654526931E12, 47.0], [1.654526955E12, 16020.0], [1.6545269355E12, 1137.0], [1.654526958E12, 18088.0], [1.654526916E12, 264.0], [1.6545269385E12, 2815.0], [1.654526961E12, 20388.0], [1.654526919E12, 54.0], [1.6545269415E12, 5763.0], [1.654526964E12, 19897.0], [1.654526922E12, 45.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6545269655E12, 18808.4], [1.6545269235E12, 47.5], [1.654526946E12, 6881.0], [1.6545269265E12, 40.90000000000001], [1.654526949E12, 10471.2], [1.6545269295E12, 43.0], [1.654526952E12, 13769.5], [1.6545269325E12, 44.20000000000002], [1.654526934E12, 111.60000000000001], [1.6545269565E12, 16800.0], [1.6545269145E12, 125.60000000000002], [1.654526937E12, 1448.0], [1.6545269595E12, 18638.0], [1.6545269175E12, 42.7], [1.65452694E12, 3853.2], [1.6545269625E12, 20138.8], [1.6545269205E12, 43.0], [1.654526943E12, 5224.000000000001], [1.6545269445E12, 7497.2], [1.654526925E12, 43.0], [1.6545269475E12, 9099.0], [1.654526928E12, 46.60000000000001], [1.6545269505E12, 11748.0], [1.654526931E12, 41.0], [1.654526955E12, 15784.0], [1.6545269355E12, 635.0], [1.654526958E12, 18068.0], [1.654526916E12, 257.8], [1.6545269385E12, 2767.4], [1.654526961E12, 20247.4], [1.654526919E12, 53.4], [1.6545269415E12, 4213.400000000001], [1.654526964E12, 18727.5], [1.654526922E12, 39.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6545269655E12, 20135.16], [1.6545269235E12, 51.0], [1.654526946E12, 6881.0], [1.6545269265E12, 48.0], [1.654526949E12, 11235.0], [1.6545269295E12, 55.0], [1.654526952E12, 14647.0], [1.6545269325E12, 59.0], [1.654526934E12, 160.0], [1.6545269565E12, 16872.0], [1.6545269145E12, 134.0], [1.654526937E12, 1768.0], [1.6545269595E12, 18638.0], [1.6545269175E12, 50.0], [1.65452694E12, 4389.0], [1.6545269625E12, 21070.36], [1.6545269205E12, 47.0], [1.654526943E12, 6471.0], [1.6545269445E12, 7529.0], [1.654526925E12, 67.0], [1.6545269475E12, 9103.0], [1.654526928E12, 72.0], [1.6545269505E12, 12033.0], [1.654526931E12, 47.0], [1.654526955E12, 16020.0], [1.6545269355E12, 1137.0], [1.654526958E12, 18088.0], [1.654526916E12, 264.0], [1.6545269385E12, 2815.0], [1.654526961E12, 20388.0], [1.654526919E12, 54.0], [1.6545269415E12, 5763.0], [1.654526964E12, 19819.15], [1.654526922E12, 45.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6545269655E12, 19503.2], [1.6545269235E12, 49.5], [1.654526946E12, 6881.0], [1.6545269265E12, 45.15], [1.654526949E12, 10935.4], [1.6545269295E12, 47.39999999999998], [1.654526952E12, 14455.0], [1.6545269325E12, 52.19999999999999], [1.654526934E12, 133.7], [1.6545269565E12, 16868.25], [1.6545269145E12, 134.0], [1.654526937E12, 1600.0], [1.6545269595E12, 18638.0], [1.6545269175E12, 48.94999999999999], [1.65452694E12, 4296.650000000001], [1.6545269625E12, 20574.8], [1.6545269205E12, 44.89999999999999], [1.654526943E12, 5742.799999999999], [1.6545269445E12, 7529.0], [1.654526925E12, 48.699999999999996], [1.6545269475E12, 9103.0], [1.654526928E12, 53.94999999999998], [1.6545269505E12, 11962.65], [1.654526931E12, 44.599999999999994], [1.654526955E12, 15958.2], [1.6545269355E12, 895.5], [1.654526958E12, 18087.1], [1.654526916E12, 264.0], [1.6545269385E12, 2815.0], [1.654526961E12, 20358.8], [1.654526919E12, 54.0], [1.6545269415E12, 4678.500000000002], [1.654526964E12, 19001.75], [1.654526922E12, 43.5]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6545269655E12, 16379.0], [1.6545269235E12, 30.0], [1.654526946E12, 3525.0], [1.6545269265E12, 28.0], [1.654526949E12, 5889.0], [1.6545269295E12, 30.0], [1.654526952E12, 9634.0], [1.6545269325E12, 30.0], [1.654526934E12, 33.0], [1.6545269565E12, 10999.0], [1.6545269145E12, 38.0], [1.654526937E12, 159.0], [1.6545269595E12, 11928.0], [1.6545269175E12, 30.0], [1.65452694E12, 993.0], [1.6545269625E12, 16563.0], [1.6545269205E12, 29.0], [1.654526943E12, 2240.0], [1.6545269445E12, 2307.0], [1.654526925E12, 29.0], [1.6545269475E12, 4511.0], [1.654526928E12, 30.0], [1.6545269505E12, 8088.0], [1.654526931E12, 31.0], [1.654526955E12, 11663.0], [1.6545269355E12, 125.0], [1.654526958E12, 12745.0], [1.654526916E12, 43.0], [1.6545269385E12, 264.0], [1.654526961E12, 13581.0], [1.654526919E12, 29.0], [1.6545269415E12, 1813.0], [1.654526964E12, 16223.0], [1.654526922E12, 29.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6545269655E12, 17238.0], [1.6545269235E12, 34.5], [1.654526946E12, 5203.0], [1.6545269265E12, 33.0], [1.654526949E12, 8700.0], [1.6545269295E12, 36.0], [1.654526952E12, 12716.0], [1.6545269325E12, 37.0], [1.654526934E12, 57.0], [1.6545269565E12, 16184.0], [1.6545269145E12, 55.0], [1.654526937E12, 629.0], [1.6545269595E12, 17293.0], [1.6545269175E12, 34.0], [1.65452694E12, 2432.5], [1.6545269625E12, 18819.0], [1.6545269205E12, 34.0], [1.654526943E12, 4030.0], [1.6545269445E12, 5401.0], [1.654526925E12, 35.0], [1.6545269475E12, 7983.0], [1.654526928E12, 33.0], [1.6545269505E12, 10934.0], [1.654526931E12, 36.0], [1.654526955E12, 14328.0], [1.6545269355E12, 353.0], [1.654526958E12, 17279.0], [1.654526916E12, 136.0], [1.6545269385E12, 1945.5], [1.654526961E12, 19442.0], [1.654526919E12, 37.0], [1.6545269415E12, 3365.0], [1.654526964E12, 17692.0], [1.654526922E12, 34.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.6545269655E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 33.0, "minX": 1.0, "maxY": 19358.0, "series": [{"data": [[33.0, 84.0], [2.0, 5203.0], [34.0, 2955.0], [37.0, 33.0], [38.0, 128.0], [40.0, 34.5], [41.0, 112.0], [43.0, 17011.0], [45.0, 101.5], [46.0, 36.0], [47.0, 36.0], [48.0, 42.5], [53.0, 37.0], [4.0, 81.0], [103.0, 17704.0], [107.0, 19358.0], [7.0, 212.0], [129.0, 17505.0], [136.0, 18613.0], [9.0, 16925.0], [11.0, 4842.5], [12.0, 5401.0], [13.0, 12547.0], [15.0, 37.0], [1.0, 18638.0], [17.0, 11758.0], [18.0, 8713.0], [19.0, 10051.0], [22.0, 1143.5], [23.0, 34.0], [25.0, 1339.5], [27.0, 2276.0], [30.0, 39.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 136.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 33.0, "minX": 1.0, "maxY": 19358.0, "series": [{"data": [[33.0, 84.0], [2.0, 5202.0], [34.0, 2953.0], [37.0, 33.0], [38.0, 128.0], [40.0, 34.5], [41.0, 112.0], [43.0, 17009.0], [45.0, 101.5], [46.0, 36.0], [47.0, 36.0], [48.0, 42.5], [53.0, 36.0], [4.0, 81.0], [103.0, 17704.0], [107.0, 19358.0], [7.0, 212.0], [129.0, 17505.0], [136.0, 18613.0], [9.0, 16924.0], [11.0, 4842.5], [12.0, 5398.0], [13.0, 12547.0], [15.0, 37.0], [1.0, 18638.0], [17.0, 11758.0], [18.0, 8711.0], [19.0, 10050.5], [22.0, 1143.5], [23.0, 34.0], [25.0, 1339.0], [27.0, 2275.0], [30.0, 39.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 136.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 7.333333333333333, "minX": 1.6545269145E12, "maxY": 75.33333333333333, "series": [{"data": [[1.6545269445E12, 74.66666666666667], [1.6545269235E12, 29.333333333333332], [1.654526946E12, 75.33333333333333], [1.654526925E12, 30.0], [1.6545269265E12, 37.333333333333336], [1.6545269475E12, 74.66666666666667], [1.654526928E12, 37.333333333333336], [1.654526949E12, 28.0], [1.6545269295E12, 44.666666666666664], [1.654526931E12, 45.333333333333336], [1.6545269325E12, 52.0], [1.654526934E12, 52.666666666666664], [1.6545269145E12, 7.333333333333333], [1.6545269355E12, 59.333333333333336], [1.654526916E12, 8.0], [1.654526937E12, 60.0], [1.6545269385E12, 67.33333333333333], [1.6545269175E12, 14.0], [1.65452694E12, 67.33333333333333], [1.654526919E12, 15.333333333333334], [1.6545269205E12, 22.0], [1.6545269415E12, 74.66666666666667], [1.654526922E12, 22.666666666666668], [1.654526943E12, 75.33333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.654526949E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.3333333333333333, "minX": 1.6545269145E12, "maxY": 135.33333333333334, "series": [{"data": [[1.6545269655E12, 87.33333333333333], [1.6545269235E12, 29.333333333333332], [1.654526946E12, 1.3333333333333333], [1.6545269265E12, 37.333333333333336], [1.654526949E12, 22.0], [1.6545269295E12, 44.666666666666664], [1.654526952E12, 16.0], [1.6545269325E12, 52.0], [1.654526934E12, 48.666666666666664], [1.6545269565E12, 16.0], [1.6545269145E12, 7.333333333333333], [1.654526937E12, 52.666666666666664], [1.6545269595E12, 4.0], [1.6545269175E12, 14.666666666666666], [1.65452694E12, 28.0], [1.6545269625E12, 135.33333333333334], [1.6545269205E12, 22.0], [1.654526943E12, 31.333333333333332], [1.6545269445E12, 8.0], [1.654526925E12, 30.0], [1.6545269475E12, 12.666666666666666], [1.654526928E12, 37.333333333333336], [1.6545269505E12, 17.333333333333332], [1.654526931E12, 44.666666666666664], [1.654526955E12, 20.666666666666668], [1.6545269355E12, 32.666666666666664], [1.654526958E12, 14.0], [1.654526916E12, 7.333333333333333], [1.6545269385E12, 10.666666666666666], [1.654526961E12, 31.333333333333332], [1.654526919E12, 14.666666666666666], [1.6545269415E12, 24.666666666666668], [1.654526964E12, 96.0], [1.654526922E12, 22.666666666666668]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.6545269655E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.3333333333333333, "minX": 1.6545269145E12, "maxY": 135.33333333333334, "series": [{"data": [[1.6545269655E12, 87.33333333333333], [1.6545269235E12, 29.333333333333332], [1.654526946E12, 1.3333333333333333], [1.6545269265E12, 37.333333333333336], [1.654526949E12, 22.0], [1.6545269295E12, 44.666666666666664], [1.654526952E12, 16.0], [1.6545269325E12, 52.0], [1.654526934E12, 48.666666666666664], [1.6545269565E12, 16.0], [1.6545269145E12, 7.333333333333333], [1.654526937E12, 52.666666666666664], [1.6545269595E12, 4.0], [1.6545269175E12, 14.666666666666666], [1.65452694E12, 28.0], [1.6545269625E12, 135.33333333333334], [1.6545269205E12, 22.0], [1.654526943E12, 31.333333333333332], [1.6545269445E12, 8.0], [1.654526925E12, 30.0], [1.6545269475E12, 12.666666666666666], [1.654526928E12, 37.333333333333336], [1.6545269505E12, 17.333333333333332], [1.654526931E12, 44.666666666666664], [1.654526955E12, 20.666666666666668], [1.6545269355E12, 32.666666666666664], [1.654526958E12, 14.0], [1.654526916E12, 7.333333333333333], [1.6545269385E12, 10.666666666666666], [1.654526961E12, 31.333333333333332], [1.654526919E12, 14.666666666666666], [1.6545269415E12, 24.666666666666668], [1.654526964E12, 96.0], [1.654526922E12, 22.666666666666668]], "isOverall": false, "label": "insideairbnb docker home response compression-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.6545269655E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.3333333333333333, "minX": 1.6545269145E12, "maxY": 135.33333333333334, "series": [{"data": [[1.6545269655E12, 87.33333333333333], [1.6545269235E12, 29.333333333333332], [1.654526946E12, 1.3333333333333333], [1.6545269265E12, 37.333333333333336], [1.654526949E12, 22.0], [1.6545269295E12, 44.666666666666664], [1.654526952E12, 16.0], [1.6545269325E12, 52.0], [1.654526934E12, 48.666666666666664], [1.6545269565E12, 16.0], [1.6545269145E12, 7.333333333333333], [1.654526937E12, 52.666666666666664], [1.6545269595E12, 4.0], [1.6545269175E12, 14.666666666666666], [1.65452694E12, 28.0], [1.6545269625E12, 135.33333333333334], [1.6545269205E12, 22.0], [1.654526943E12, 31.333333333333332], [1.6545269445E12, 8.0], [1.654526925E12, 30.0], [1.6545269475E12, 12.666666666666666], [1.654526928E12, 37.333333333333336], [1.6545269505E12, 17.333333333333332], [1.654526931E12, 44.666666666666664], [1.654526955E12, 20.666666666666668], [1.6545269355E12, 32.666666666666664], [1.654526958E12, 14.0], [1.654526916E12, 7.333333333333333], [1.6545269385E12, 10.666666666666666], [1.654526961E12, 31.333333333333332], [1.654526919E12, 14.666666666666666], [1.6545269415E12, 24.666666666666668], [1.654526964E12, 96.0], [1.654526922E12, 22.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.6545269655E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

