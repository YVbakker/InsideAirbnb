@page "/stats"
@using ChartJs.Blazor.PieChart
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Util
@using System.Drawing
@using ChartJs.Blazor.BarChart
@using InsideAirbnb.Models.Dto
@using InsideAirbnb.Services
@using InsideAirbnb.Utils
@using NuGet.Packaging

<PageTitle>Statistics - InsideAirbnb</PageTitle>
<div class="container-fluid p-3">
    <AuthorizeView>
        <Authorized>
            <ul>
                @foreach (var claim in context.User.Claims)
                {
                    <li>@claim.Type: @claim.Value</li>
                }
            </ul>
        </Authorized>
    </AuthorizeView>
    <AuthorizeView Roles="Administrator">
        <Authorized>
            <h1>Statistics</h1>
            @if (_pieConfig != null)
            {
                <Chart Config="_pieConfig"></Chart>
            }
            else
            {
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            }
            @if (_barConfig != null)
            {
                <Chart Config="_barConfig"></Chart>
            }
            else
            {
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            }
        </Authorized>
        <NotAuthorized>
            <p>You need to log in as an admin in order to see this.</p>
        </NotAuthorized>
    </AuthorizeView>
</div>


@code
{
    [Inject]
    protected IListingsService ListingsService { get; set; } = null!;

    private IList<StatisticsDto> NListingsPerNeighborhood { get; set; } = default!;
    private IList<StatisticsDto> AvgListingsPerNeighborhood { get; set; } = default!;

    private PieConfig _pieConfig = default!;
    private BarConfig _barConfig = default!;

    private string? Geojson { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var rnd = new Random();
        NListingsPerNeighborhood = await ListingsService.GetNumberOfListingsPerNeighborhood();
        AvgListingsPerNeighborhood = await ListingsService.GetAvgPricePerNeighborhood();
        _pieConfig = new PieConfig
        {
            Options = new PieOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Listings per Neighborhood"
                }
            }
        };
        
        _barConfig = new BarConfig
        {
            Options = new BarOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Average price per Neighborhood"
                }
            }
        };

        _pieConfig.Data.Labels.AddRange(NListingsPerNeighborhood.Select(e => e.Label));
        _barConfig.Data.Labels.AddRange(AvgListingsPerNeighborhood.Select(e => e.Label));

        var pieDataset = new PieDataset<float>(NListingsPerNeighborhood.Select(e => e.Value))
        {
            BackgroundColor = CssColorUtil.Colors.Take(NListingsPerNeighborhood.Count).ToArray()
        };
        var barDataset = new BarDataset<float>(AvgListingsPerNeighborhood.Select(e => e.Value))
        {
            BackgroundColor = CssColorUtil.Colors.Take(AvgListingsPerNeighborhood.Count).ToArray()
        };

        _pieConfig.Data.Datasets.Add(pieDataset);
        _barConfig.Data.Datasets.Add(barDataset);
    }
}