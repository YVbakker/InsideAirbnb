@using InsideAirbnb.Services
@using InsideAirbnb.Delegates
@namespace InsideAirbnb.Components
<div class="h-100 d-flex flex-column">
    
    <div id="map" class="@Class"></div>
</div>


@code {
    
    [Inject]
    protected IListingsService ListingsService { get; set; } = null!;
    
    [Inject]
    private IMapboxService MapboxService { get; set; } = default!;

    [Inject]
    private IJSRuntime JsRuntime { get; set; } = default!;

    [Parameter]
    public string? GeoJson { get; set; }

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public SelectListingDelegate OnSelect { get; set; }

    private DotNetObjectReference<Mapbox>? dotNetHelper;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        switch (firstRender)
        {
            case true:
            {
                var token = MapboxService.GetMapboxToken();
                dotNetHelper = DotNetObjectReference.Create(this);
                await JsRuntime.InvokeVoidAsync("loadMapBox", token, GeoJson, dotNetHelper);
                break;
            }
            case false:
                await JsRuntime.InvokeVoidAsync("updateMap", GeoJson);
                break;
        }
    }

    [JSInvokable]
    public async Task SelectListing(int listingId)
    {
        await OnSelect(listingId);
    }
    
    public void Dispose()
    {
        dotNetHelper?.Dispose();
    }

}